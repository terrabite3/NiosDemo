
count_demo.elf:     file format elf32-littlenios2
count_demo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000822c

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002edc memsz 0x00002edc flags r-x
    LOAD off    0x00003efc vaddr 0x0000aefc paddr 0x0000b208 align 2**12
         filesz 0x0000030c memsz 0x0000030c flags rw-
    LOAD off    0x00004514 vaddr 0x0000b514 paddr 0x0000b514 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002bac  0000822c  0000822c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000124  0000add8  0000add8  00003dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000030c  0000aefc  0000b208  00003efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  0000b514  0000b514  00004514  2**2
                  ALLOC, SMALL_DATA
  6 .nios_ram     00000000  0000b63c  0000b63c  00004208  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004208  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000688  00000000  00000000  00004230  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000096b8  00000000  00000000  000048b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000031d2  00000000  00000000  0000df70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000361b  00000000  00000000  00011142  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000f1c  00000000  00000000  00014760  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000020e0  00000000  00000000  0001567c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001335  00000000  00000000  0001775c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00018a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  00018ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001ac3d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001ac40  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001ac43  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001ac44  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001ac45  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001ac49  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001ac4d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001ac51  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001ac5a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001ac63  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0001ac6c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001b  00000000  00000000  0001ac74  2**0
                  CONTENTS, READONLY
 29 .jdi          000037b0  00000000  00000000  0001ac8f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00058a34  00000000  00000000  0001e43f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
0000822c l    d  .text	00000000 .text
0000add8 l    d  .rodata	00000000 .rodata
0000aefc l    d  .rwdata	00000000 .rwdata
0000b514 l    d  .bss	00000000 .bss
0000b63c l    d  .nios_ram	00000000 .nios_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../count_demo_bsp//obj/HAL/src/crt0.o
00008264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 count_binary.c
0000b514 l     O .bss	00000001 count
00008268 l     F .text	00000020 lcd_init
00008288 l     F .text	00000054 initial_message
000082dc l     F .text	0000001c count_led
000082f8 l     F .text	0000001c count_sevenseg
00008314 l     F .text	00000028 count_lcd
0000833c l     F .text	00000050 count_all
0000838c l     F .text	00000138 handle_button_press
00000000 l    df *ABS*	00000000 lib2-divmod.c
000085c4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008848 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000aefc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
0000901c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00009198 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000092e8 l     F .text	00000038 alt_dev_reg
0000afdc l     O .rwdata	0000002c jtag_uart
0000b008 l     O .rwdata	0000002c character_lcd
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000095f0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00009d1c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009e60 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009e8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a2fc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000a454 l     F .text	00000050 alt_get_errno
0000a4a4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b538 g     O .bss	00000004 alt_instruction_exception_handler
00008780 g     F .text	00000018 putchar
00009100 g     F .text	00000068 alt_main
00008798 g     F .text	00000080 _puts_r
0000b53c g     O .bss	00000100 alt_irq
0000b208 g       *ABS*	00000000 __flash_rwdata_start
00009760 g     F .text	0000003c alt_up_character_lcd_send_cmd
0000872c g     F .text	0000004c printf
00008000 g       *ABS*	00000000 __alt_mem_nios_ram
0000a914 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
000096ec g     F .text	00000074 get_DDRAM_addr
00008000 g     F .entry	0000000c __reset
0000b518 g     O .bss	00000004 edge_capture
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b51c g     O .bss	00000004 errno
0000b524 g     O .bss	00000004 alt_argv
000131dc g       *ABS*	00000000 _gp
00009168 g     F .text	00000030 usleep
0000b05c g     O .rwdata	00000180 alt_fd_list
00008778 g     F .text	00000008 _putchar_r
00009f80 g     F .text	00000090 alt_find_dev
000098fc g     F .text	00000050 alt_up_character_lcd_write_fd
0000a3dc g     F .text	00000078 alt_io_redirect
00008818 g     F .text	00000014 puts
0000ab1c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009478 g     F .text	000000e4 altera_avalon_jtag_uart_read
000086f0 g     F .text	0000003c _printf_r
000086e0 g     F .text	00000008 .hidden __udivsi3
0000b1f4 g     O .rwdata	00000004 alt_max_fd
0000b1dc g     O .rwdata	00000004 _global_impure_ptr
0000b63c g       *ABS*	00000000 __bss_end
0000a20c g     F .text	000000f0 alt_iic_isr_register
0000a810 g     F .text	00000104 alt_tick
0000a1c0 g     F .text	0000004c alt_ic_irq_enabled
0000a778 g     F .text	00000098 alt_alarm_stop
0000b52c g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d0 alt_irq_handler
0000b034 g     O .rwdata	00000028 alt_dev_null
00009b90 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00009e44 g     F .text	0000001c alt_dcache_flush_all
0000b208 g       *ABS*	00000000 __ram_rwdata_end
0000b1ec g     O .rwdata	00000008 alt_dev_list
000091e8 g     F .text	00000100 write
00008f44 g     F .text	00000058 _putc_r
0000aefc g       *ABS*	00000000 __ram_rodata_end
000086e8 g     F .text	00000008 .hidden __umodsi3
0000b63c g       *ABS*	00000000 end
000081cc g     F .exceptions	00000060 alt_instruction_exception_entry
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00009664 g     F .text	00000088 alt_avalon_timer_sc_init
0000955c g     F .text	00000094 altera_avalon_jtag_uart_write
00009810 g     F .text	00000078 alt_up_character_lcd_write
000088b4 g     F .text	0000056c ___vfprintf_internal_r
0000ac08 g     F .text	0000019c __call_exitprocs
0000822c g     F .text	0000003c _start
0000b530 g     O .bss	00000004 _alt_tick_rate
0000b534 g     O .bss	00000004 _alt_nticks
00009354 g     F .text	00000064 alt_sys_init
00009a48 g     F .text	00000088 alt_up_character_lcd_shift_display
00009ad0 g     F .text	0000008c alt_up_character_lcd_erase_pos
00008ff4 g     F .text	00000028 .hidden __mulsi3
0000aefc g       *ABS*	00000000 __ram_rwdata_start
0000add8 g       *ABS*	00000000 __ram_rodata_start
000093b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000aa48 g     F .text	000000d4 alt_get_fd
00009bc4 g     F .text	00000158 alt_busy_sleep
0000abd8 g     F .text	00000030 memcmp
0000b63c g       *ABS*	00000000 __alt_stack_base
0000a934 g     F .text	00000114 alt_find_file
00009edc g     F .text	000000a4 alt_dev_llist_insert
00008e44 g     F .text	000000ac __sfvwrite_small_dev
0000b514 g       *ABS*	00000000 __bss_start
000084c4 g     F .text	00000100 main
0000b528 g     O .bss	00000004 alt_envp
00009418 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000099c0 g     F .text	00000088 alt_up_character_lcd_shift_cursor
0000b1f8 g     O .rwdata	00000004 alt_errno
00008ef0 g     F .text	00000054 putc
00008630 g     F .text	00000054 .hidden __divsi3
000097d0 g     F .text	00000040 alt_up_character_lcd_open_dev
0000979c g     F .text	00000034 alt_up_character_lcd_init
0000add8 g       *ABS*	00000000 __flash_rodata_start
00009320 g     F .text	00000034 alt_irq_init
0000a6f8 g     F .text	00000080 alt_release_fd
00009b5c g     F .text	00000034 alt_up_character_lcd_cursor_off
00008f9c g     F .text	00000058 _write_r
0000b1e0 g     O .rwdata	00000004 _impure_ptr
0000b520 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
0000b1e4 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a02c g     F .text	00000050 alt_ic_isr_register
0000b208 g       *ABS*	00000000 _edata
0000b63c g       *ABS*	00000000 _end
0000822c g       *ABS*	00000000 __ram_exceptions_end
0000a11c g     F .text	000000a4 alt_ic_irq_disable
0000abb8 g     F .text	00000020 exit
00008684 g     F .text	0000005c .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
00009888 g     F .text	00000074 alt_up_character_lcd_string
0000ada4 g     F .text	00000034 _exit
0000882c g     F .text	0000001c strlen
0000a598 g     F .text	00000160 open
0000a010 g     F .text	0000001c alt_icache_flush_all
0000994c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0000b1fc g     O .rwdata	00000004 alt_priority_mask
0000a07c g     F .text	000000a0 alt_ic_irq_enable
00008e20 g     F .text	00000024 __vfprintf_internal
0000b200 g     O .rwdata	00000008 alt_alarm_list
00009d6c g     F .text	000000d8 close
00009080 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608b14 	ori	at,at,33324
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081cc0 	call	81cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10ad4f04 	addi	r2,r2,-19140
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10ad4f04 	addi	r2,r2,-19140
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	21000104 	addi	r4,r4,4
    8168:	1105883a 	add	r2,r2,r4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff4f50>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff4f44>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	e037883a 	mov	sp,fp
    81bc:	dfc00117 	ldw	ra,4(sp)
    81c0:	df000017 	ldw	fp,0(sp)
    81c4:	dec00204 	addi	sp,sp,8
    81c8:	f800283a 	ret

000081cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81cc:	defffb04 	addi	sp,sp,-20
    81d0:	dfc00415 	stw	ra,16(sp)
    81d4:	df000315 	stw	fp,12(sp)
    81d8:	df000304 	addi	fp,sp,12
    81dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e0:	00bfffc4 	movi	r2,-1
    81e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81ec:	d0a0d717 	ldw	r2,-31908(gp)
    81f0:	10000726 	beq	r2,zero,8210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f4:	d0a0d717 	ldw	r2,-31908(gp)
    81f8:	e0fffd17 	ldw	r3,-12(fp)
    81fc:	1809883a 	mov	r4,r3
    8200:	e17fff17 	ldw	r5,-4(fp)
    8204:	e1bffe17 	ldw	r6,-8(fp)
    8208:	103ee83a 	callr	r2
    820c:	00000206 	br	8218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8214:	0005883a 	mov	r2,zero
}
    8218:	e037883a 	mov	sp,fp
    821c:	dfc00117 	ldw	ra,4(sp)
    8220:	df000017 	ldw	fp,0(sp)
    8224:	dec00204 	addi	sp,sp,8
    8228:	f800283a 	ret

Disassembly of section .text:

0000822c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    822c:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8230:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8238:	d68c7714 	ori	gp,gp,12764
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    823c:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8240:	10ad4514 	ori	r2,r2,46356

    movhi r3, %hi(__bss_end)
    8244:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8248:	18ed8f14 	ori	r3,r3,46652

    beq r2, r3, 1f
    824c:	10c00326 	beq	r2,r3,825c <_start+0x30>

0:
    stw zero, (r2)
    8250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8258:	10fffd36 	bltu	r2,r3,8250 <_gp+0xffff5074>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    825c:	00090800 	call	9080 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8260:	00091000 	call	9100 <alt_main>

00008264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8264:	003fff06 	br	8264 <_gp+0xffff5088>

00008268 <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
    8268:	defffe04 	addi	sp,sp,-8
    826c:	df000115 	stw	fp,4(sp)
    8270:	df000104 	addi	fp,sp,4
    8274:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
               ESC_TOP_LEFT);
}
    8278:	e037883a 	mov	sp,fp
    827c:	df000017 	ldw	fp,0(sp)
    8280:	dec00104 	addi	sp,sp,4
    8284:	f800283a 	ret

00008288 <initial_message>:

static void initial_message()
{
    8288:	defffe04 	addi	sp,sp,-8
    828c:	dfc00115 	stw	ra,4(sp)
    8290:	df000015 	stw	fp,0(sp)
    8294:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
    8298:	01000074 	movhi	r4,1
    829c:	212b7604 	addi	r4,r4,-21032
    82a0:	00088180 	call	8818 <puts>
    printf("* Hello from Nios II!    *\n");
    82a4:	01000074 	movhi	r4,1
    82a8:	212b7e04 	addi	r4,r4,-21000
    82ac:	00088180 	call	8818 <puts>
    printf("* Counting from 00 to ff *\n");
    82b0:	01000074 	movhi	r4,1
    82b4:	212b8504 	addi	r4,r4,-20972
    82b8:	00088180 	call	8818 <puts>
    printf("**************************\n");
    82bc:	01000074 	movhi	r4,1
    82c0:	212b8c04 	addi	r4,r4,-20944
    82c4:	00088180 	call	8818 <puts>
}
    82c8:	e037883a 	mov	sp,fp
    82cc:	dfc00117 	ldw	ra,4(sp)
    82d0:	df000017 	ldw	fp,0(sp)
    82d4:	dec00204 	addi	sp,sp,8
    82d8:	f800283a 	ret

000082dc <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
    82dc:	deffff04 	addi	sp,sp,-4
    82e0:	df000015 	stw	fp,0(sp)
    82e4:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(
        LED_PIO_BASE,
        count
        );
#endif
}
    82e8:	e037883a 	mov	sp,fp
    82ec:	df000017 	ldw	fp,0(sp)
    82f0:	dec00104 	addi	sp,sp,4
    82f4:	f800283a 	ret

000082f8 <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
    82f8:	deffff04 	addi	sp,sp,-4
    82fc:	df000015 	stw	fp,0(sp)
    8300:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
#endif
}
    8304:	e037883a 	mov	sp,fp
    8308:	df000017 	ldw	fp,0(sp)
    830c:	dec00104 	addi	sp,sp,4
    8310:	f800283a 	ret

00008314 <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
    8314:	defffd04 	addi	sp,sp,-12
    8318:	df000215 	stw	fp,8(sp)
    831c:	df000204 	addi	fp,sp,8
    8320:	e13fff15 	stw	r4,-4(fp)
    FILE* __attribute__ ((unused))  lcd;  /* Attribute suppresses "unused variable" warning. */
    lcd = (FILE*) arg;
    8324:	e0bfff17 	ldw	r2,-4(fp)
    8328:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
}
    832c:	e037883a 	mov	sp,fp
    8330:	df000017 	ldw	fp,0(sp)
    8334:	dec00104 	addi	sp,sp,4
    8338:	f800283a 	ret

0000833c <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
    833c:	defffd04 	addi	sp,sp,-12
    8340:	dfc00215 	stw	ra,8(sp)
    8344:	df000115 	stw	fp,4(sp)
    8348:	df000104 	addi	fp,sp,4
    834c:	e13fff15 	stw	r4,-4(fp)
    count_led();
    8350:	00082dc0 	call	82dc <count_led>
    count_sevenseg();
    8354:	00082f80 	call	82f8 <count_sevenseg>
    count_lcd( arg );
    8358:	e13fff17 	ldw	r4,-4(fp)
    835c:	00083140 	call	8314 <count_lcd>
    printf("%02x,  ", count);
    8360:	d0a0ce03 	ldbu	r2,-31944(gp)
    8364:	10803fcc 	andi	r2,r2,255
    8368:	01000074 	movhi	r4,1
    836c:	212b9304 	addi	r4,r4,-20916
    8370:	100b883a 	mov	r5,r2
    8374:	000872c0 	call	872c <printf>
}
    8378:	e037883a 	mov	sp,fp
    837c:	dfc00117 	ldw	ra,4(sp)
    8380:	df000017 	ldw	fp,0(sp)
    8384:	dec00204 	addi	sp,sp,8
    8388:	f800283a 	ret

0000838c <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
    838c:	defffc04 	addi	sp,sp,-16
    8390:	dfc00315 	stw	ra,12(sp)
    8394:	df000215 	stw	fp,8(sp)
    8398:	df000204 	addi	fp,sp,8
    839c:	2005883a 	mov	r2,r4
    83a0:	e17fff15 	stw	r5,-4(fp)
    83a4:	e0bffe05 	stb	r2,-8(fp)
    /* Button press actions while counting. */
    if (type == 'c')
    83a8:	e0bffe03 	ldbu	r2,-8(fp)
    83ac:	108018d8 	cmpnei	r2,r2,99
    83b0:	10001b1e 	bne	r2,zero,8420 <handle_button_press+0x94>
    {
        switch (edge_capture) 
    83b4:	d0a0cf17 	ldw	r2,-31940(gp)
    83b8:	10c000a0 	cmpeqi	r3,r2,2
    83bc:	18000c1e 	bne	r3,zero,83f0 <handle_button_press+0x64>
    83c0:	10c000c8 	cmpgei	r3,r2,3
    83c4:	1800031e 	bne	r3,zero,83d4 <handle_button_press+0x48>
    83c8:	10800060 	cmpeqi	r2,r2,1
    83cc:	1000061e 	bne	r2,zero,83e8 <handle_button_press+0x5c>
    83d0:	00000f06 	br	8410 <handle_button_press+0x84>
    83d4:	10c00120 	cmpeqi	r3,r2,4
    83d8:	1800071e 	bne	r3,zero,83f8 <handle_button_press+0x6c>
    83dc:	10800220 	cmpeqi	r2,r2,8
    83e0:	1000081e 	bne	r2,zero,8404 <handle_button_press+0x78>
    83e4:	00000a06 	br	8410 <handle_button_press+0x84>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
    83e8:	00082dc0 	call	82dc <count_led>
            break;
    83ec:	00000b06 	br	841c <handle_button_press+0x90>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
    83f0:	00082f80 	call	82f8 <count_sevenseg>
            break;
    83f4:	00000906 	br	841c <handle_button_press+0x90>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
    83f8:	e13fff17 	ldw	r4,-4(fp)
    83fc:	00083140 	call	8314 <count_lcd>
            break;
    8400:	00000606 	br	841c <handle_button_press+0x90>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
    8404:	e13fff17 	ldw	r4,-4(fp)
    8408:	000833c0 	call	833c <count_all>
            break;
    840c:	00000306 	br	841c <handle_button_press+0x90>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
    8410:	e13fff17 	ldw	r4,-4(fp)
    8414:	000833c0 	call	833c <count_all>
            break;
    8418:	0001883a 	nop
    841c:	00002406 	br	84b0 <handle_button_press+0x124>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
    8420:	d0a0cf17 	ldw	r2,-31940(gp)
    8424:	10c000a0 	cmpeqi	r3,r2,2
    8428:	18000f1e 	bne	r3,zero,8468 <handle_button_press+0xdc>
    842c:	10c000c8 	cmpgei	r3,r2,3
    8430:	1800031e 	bne	r3,zero,8440 <handle_button_press+0xb4>
    8434:	10800060 	cmpeqi	r2,r2,1
    8438:	1000061e 	bne	r2,zero,8454 <handle_button_press+0xc8>
    843c:	00001906 	br	84a4 <handle_button_press+0x118>
    8440:	10c00120 	cmpeqi	r3,r2,4
    8444:	18000d1e 	bne	r3,zero,847c <handle_button_press+0xf0>
    8448:	10800220 	cmpeqi	r2,r2,8
    844c:	1000101e 	bne	r2,zero,8490 <handle_button_press+0x104>
    8450:	00001406 	br	84a4 <handle_button_press+0x118>
        {
        case 0x1:
            printf( "Button 1\n");
    8454:	01000074 	movhi	r4,1
    8458:	212b9504 	addi	r4,r4,-20908
    845c:	00088180 	call	8818 <puts>
            edge_capture = 0;
    8460:	d020cf15 	stw	zero,-31940(gp)
            break;
    8464:	00001206 	br	84b0 <handle_button_press+0x124>
        case 0x2:
            printf( "Button 2\n");
    8468:	01000074 	movhi	r4,1
    846c:	212b9804 	addi	r4,r4,-20896
    8470:	00088180 	call	8818 <puts>
            edge_capture = 0;
    8474:	d020cf15 	stw	zero,-31940(gp)
            break;
    8478:	00000d06 	br	84b0 <handle_button_press+0x124>
        case 0x4:
            printf( "Button 3\n");
    847c:	01000074 	movhi	r4,1
    8480:	212b9b04 	addi	r4,r4,-20884
    8484:	00088180 	call	8818 <puts>
            edge_capture = 0;
    8488:	d020cf15 	stw	zero,-31940(gp)
            break;
    848c:	00000806 	br	84b0 <handle_button_press+0x124>
        case 0x8:
            printf( "Button 4\n");
    8490:	01000074 	movhi	r4,1
    8494:	212b9e04 	addi	r4,r4,-20872
    8498:	00088180 	call	8818 <puts>
            edge_capture = 0;
    849c:	d020cf15 	stw	zero,-31940(gp)
            break;
    84a0:	00000306 	br	84b0 <handle_button_press+0x124>
        default:
            printf( "Button press UNKNOWN!!\n");
    84a4:	01000074 	movhi	r4,1
    84a8:	212ba104 	addi	r4,r4,-20860
    84ac:	00088180 	call	8818 <puts>
        }
    }
}
    84b0:	e037883a 	mov	sp,fp
    84b4:	dfc00117 	ldw	ra,4(sp)
    84b8:	df000017 	ldw	fp,0(sp)
    84bc:	dec00204 	addi	sp,sp,8
    84c0:	f800283a 	ret

000084c4 <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{ 
    84c4:	defffb04 	addi	sp,sp,-20
    84c8:	dfc00415 	stw	ra,16(sp)
    84cc:	df000315 	stw	fp,12(sp)
    84d0:	df000304 	addi	fp,sp,12
    int i;
    int  __attribute__ ((unused))  wait_time;  /* Attribute suppresses "var set but not used" warning. */
    FILE * lcd;

    count = 0;
    84d4:	d020ce05 	stb	zero,-31944(gp)

    /* Initialize the LCD, if there is one.
     */
    lcd = LCD_OPEN();
    84d8:	e03ffe15 	stw	zero,-8(fp)
    if(lcd != NULL) {lcd_init( lcd );}
    84dc:	e0bffe17 	ldw	r2,-8(fp)
    84e0:	10000226 	beq	r2,zero,84ec <main+0x28>
    84e4:	e13ffe17 	ldw	r4,-8(fp)
    84e8:	00082680 	call	8268 <lcd_init>
    init_button_pio();
#endif

/* Initial message to output. */

    initial_message();
    84ec:	00082880 	call	8288 <initial_message>

/* Continue 0-ff counting loop. */

    while( 1 ) 
    {
        usleep(100000);
    84f0:	010000b4 	movhi	r4,2
    84f4:	2121a804 	addi	r4,r4,-31072
    84f8:	00091680 	call	9168 <usleep>
        if (edge_capture != 0)
    84fc:	d0a0cf17 	ldw	r2,-31940(gp)
    8500:	10000426 	beq	r2,zero,8514 <main+0x50>
        {
            /* Handle button presses while counting... */
            handle_button_press('c', lcd);
    8504:	010018c4 	movi	r4,99
    8508:	e17ffe17 	ldw	r5,-8(fp)
    850c:	000838c0 	call	838c <handle_button_press>
    8510:	00000206 	br	851c <main+0x58>
        }
        /* If no button presses, try to output counting to all. */
        else
        {
            count_all( lcd );
    8514:	e13ffe17 	ldw	r4,-8(fp)
    8518:	000833c0 	call	833c <count_all>
        }
        /*
         * If done counting, wait about 7 seconds...
         * detect button presses while waiting.
         */
        if( count == 0xff )
    851c:	d0a0ce03 	ldbu	r2,-31944(gp)
    8520:	10803fcc 	andi	r2,r2,255
    8524:	10803fd8 	cmpnei	r2,r2,255
    8528:	1000221e 	bne	r2,zero,85b4 <main+0xf0>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
    852c:	01000074 	movhi	r4,1
    8530:	212ba704 	addi	r4,r4,-20836
    8534:	000872c0 	call	872c <printf>
            edge_capture = 0; /* Reset to 0 during wait/pause period. */
    8538:	d020cf15 	stw	zero,-31940(gp)

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
    853c:	e03fff15 	stw	zero,-4(fp)
            for (i = 0; i<70; ++i)
    8540:	e03ffd15 	stw	zero,-12(fp)
    8544:	00001506 	br	859c <main+0xd8>
            {
                printf(".");
    8548:	01000b84 	movi	r4,46
    854c:	00087800 	call	8780 <putchar>
                wait_time = i/10;
    8550:	e0bffd17 	ldw	r2,-12(fp)
    8554:	1009883a 	mov	r4,r2
    8558:	01400284 	movi	r5,10
    855c:	00086300 	call	8630 <__divsi3>
    8560:	e0bfff15 	stw	r2,-4(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
                    wait_time+1);

                if (edge_capture != 0) 
    8564:	d0a0cf17 	ldw	r2,-31940(gp)
    8568:	10000626 	beq	r2,zero,8584 <main+0xc0>
                {
                    printf( "\nYou pushed:  " );
    856c:	01000074 	movhi	r4,1
    8570:	212baa04 	addi	r4,r4,-20824
    8574:	000872c0 	call	872c <printf>
                    handle_button_press('w', lcd);
    8578:	01001dc4 	movi	r4,119
    857c:	e17ffe17 	ldw	r5,-8(fp)
    8580:	000838c0 	call	838c <handle_button_press>
                }
                usleep(100000); /* Sleep for 0.1s. */
    8584:	010000b4 	movhi	r4,2
    8588:	2121a804 	addi	r4,r4,-31072
    858c:	00091680 	call	9168 <usleep>

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
            for (i = 0; i<70; ++i)
    8590:	e0bffd17 	ldw	r2,-12(fp)
    8594:	10800044 	addi	r2,r2,1
    8598:	e0bffd15 	stw	r2,-12(fp)
    859c:	e0bffd17 	ldw	r2,-12(fp)
    85a0:	10801190 	cmplti	r2,r2,70
    85a4:	103fe81e 	bne	r2,zero,8548 <_gp+0xffff536c>
                }
                usleep(100000); /* Sleep for 0.1s. */
            }
            /*  Output the "loop start" messages before looping, again.
             */
            initial_message();
    85a8:	00082880 	call	8288 <initial_message>
            lcd_init( lcd );
    85ac:	e13ffe17 	ldw	r4,-8(fp)
    85b0:	00082680 	call	8268 <lcd_init>
        }
        count++;
    85b4:	d0a0ce03 	ldbu	r2,-31944(gp)
    85b8:	10800044 	addi	r2,r2,1
    85bc:	d0a0ce05 	stb	r2,-31944(gp)
    }
    85c0:	003fcb06 	br	84f0 <_gp+0xffff5314>

000085c4 <udivmodsi4>:
    85c4:	2900182e 	bgeu	r5,r4,8628 <udivmodsi4+0x64>
    85c8:	28001716 	blt	r5,zero,8628 <udivmodsi4+0x64>
    85cc:	00800804 	movi	r2,32
    85d0:	00c00044 	movi	r3,1
    85d4:	00000206 	br	85e0 <udivmodsi4+0x1c>
    85d8:	10001126 	beq	r2,zero,8620 <udivmodsi4+0x5c>
    85dc:	28000516 	blt	r5,zero,85f4 <udivmodsi4+0x30>
    85e0:	294b883a 	add	r5,r5,r5
    85e4:	10bfffc4 	addi	r2,r2,-1
    85e8:	18c7883a 	add	r3,r3,r3
    85ec:	293ffa36 	bltu	r5,r4,85d8 <_gp+0xffff53fc>
    85f0:	18000b26 	beq	r3,zero,8620 <udivmodsi4+0x5c>
    85f4:	0005883a 	mov	r2,zero
    85f8:	21400236 	bltu	r4,r5,8604 <udivmodsi4+0x40>
    85fc:	2149c83a 	sub	r4,r4,r5
    8600:	10c4b03a 	or	r2,r2,r3
    8604:	1806d07a 	srli	r3,r3,1
    8608:	280ad07a 	srli	r5,r5,1
    860c:	183ffa1e 	bne	r3,zero,85f8 <_gp+0xffff541c>
    8610:	3000011e 	bne	r6,zero,8618 <udivmodsi4+0x54>
    8614:	f800283a 	ret
    8618:	2005883a 	mov	r2,r4
    861c:	f800283a 	ret
    8620:	0005883a 	mov	r2,zero
    8624:	003ffa06 	br	8610 <_gp+0xffff5434>
    8628:	00c00044 	movi	r3,1
    862c:	003ff106 	br	85f4 <_gp+0xffff5418>

00008630 <__divsi3>:
    8630:	defffe04 	addi	sp,sp,-8
    8634:	dfc00115 	stw	ra,4(sp)
    8638:	dc000015 	stw	r16,0(sp)
    863c:	20000b16 	blt	r4,zero,866c <__divsi3+0x3c>
    8640:	0021883a 	mov	r16,zero
    8644:	28000c16 	blt	r5,zero,8678 <__divsi3+0x48>
    8648:	000d883a 	mov	r6,zero
    864c:	00085c40 	call	85c4 <udivmodsi4>
    8650:	0407c83a 	sub	r3,zero,r16
    8654:	1884f03a 	xor	r2,r3,r2
    8658:	1405883a 	add	r2,r2,r16
    865c:	dfc00117 	ldw	ra,4(sp)
    8660:	dc000017 	ldw	r16,0(sp)
    8664:	dec00204 	addi	sp,sp,8
    8668:	f800283a 	ret
    866c:	0109c83a 	sub	r4,zero,r4
    8670:	04000044 	movi	r16,1
    8674:	283ff40e 	bge	r5,zero,8648 <_gp+0xffff546c>
    8678:	014bc83a 	sub	r5,zero,r5
    867c:	8400005c 	xori	r16,r16,1
    8680:	003ff106 	br	8648 <_gp+0xffff546c>

00008684 <__modsi3>:
    8684:	defffd04 	addi	sp,sp,-12
    8688:	dfc00215 	stw	ra,8(sp)
    868c:	dc400115 	stw	r17,4(sp)
    8690:	dc000015 	stw	r16,0(sp)
    8694:	20000c16 	blt	r4,zero,86c8 <__modsi3+0x44>
    8698:	0023883a 	mov	r17,zero
    869c:	0021883a 	mov	r16,zero
    86a0:	28000d16 	blt	r5,zero,86d8 <__modsi3+0x54>
    86a4:	01800044 	movi	r6,1
    86a8:	00085c40 	call	85c4 <udivmodsi4>
    86ac:	1404f03a 	xor	r2,r2,r16
    86b0:	8885883a 	add	r2,r17,r2
    86b4:	dfc00217 	ldw	ra,8(sp)
    86b8:	dc400117 	ldw	r17,4(sp)
    86bc:	dc000017 	ldw	r16,0(sp)
    86c0:	dec00304 	addi	sp,sp,12
    86c4:	f800283a 	ret
    86c8:	0109c83a 	sub	r4,zero,r4
    86cc:	04400044 	movi	r17,1
    86d0:	043fffc4 	movi	r16,-1
    86d4:	283ff30e 	bge	r5,zero,86a4 <_gp+0xffff54c8>
    86d8:	014bc83a 	sub	r5,zero,r5
    86dc:	003ff106 	br	86a4 <_gp+0xffff54c8>

000086e0 <__udivsi3>:
    86e0:	000d883a 	mov	r6,zero
    86e4:	00085c41 	jmpi	85c4 <udivmodsi4>

000086e8 <__umodsi3>:
    86e8:	01800044 	movi	r6,1
    86ec:	00085c41 	jmpi	85c4 <udivmodsi4>

000086f0 <_printf_r>:
    86f0:	defffd04 	addi	sp,sp,-12
    86f4:	dfc00015 	stw	ra,0(sp)
    86f8:	d9800115 	stw	r6,4(sp)
    86fc:	d9c00215 	stw	r7,8(sp)
    8700:	20c00217 	ldw	r3,8(r4)
    8704:	280d883a 	mov	r6,r5
    8708:	01400074 	movhi	r5,1
    870c:	29639104 	addi	r5,r5,-29116
    8710:	19400115 	stw	r5,4(r3)
    8714:	21400217 	ldw	r5,8(r4)
    8718:	d9c00104 	addi	r7,sp,4
    871c:	00088b40 	call	88b4 <___vfprintf_internal_r>
    8720:	dfc00017 	ldw	ra,0(sp)
    8724:	dec00304 	addi	sp,sp,12
    8728:	f800283a 	ret

0000872c <printf>:
    872c:	defffc04 	addi	sp,sp,-16
    8730:	dfc00015 	stw	ra,0(sp)
    8734:	d9400115 	stw	r5,4(sp)
    8738:	d9800215 	stw	r6,8(sp)
    873c:	d9c00315 	stw	r7,12(sp)
    8740:	00800074 	movhi	r2,1
    8744:	10ac7804 	addi	r2,r2,-20000
    8748:	10800017 	ldw	r2,0(r2)
    874c:	200b883a 	mov	r5,r4
    8750:	01000074 	movhi	r4,1
    8754:	10c00217 	ldw	r3,8(r2)
    8758:	21239104 	addi	r4,r4,-29116
    875c:	d9800104 	addi	r6,sp,4
    8760:	19000115 	stw	r4,4(r3)
    8764:	11000217 	ldw	r4,8(r2)
    8768:	0008e200 	call	8e20 <__vfprintf_internal>
    876c:	dfc00017 	ldw	ra,0(sp)
    8770:	dec00404 	addi	sp,sp,16
    8774:	f800283a 	ret

00008778 <_putchar_r>:
    8778:	21800217 	ldw	r6,8(r4)
    877c:	0008f441 	jmpi	8f44 <_putc_r>

00008780 <putchar>:
    8780:	00800074 	movhi	r2,1
    8784:	10ac7804 	addi	r2,r2,-20000
    8788:	200b883a 	mov	r5,r4
    878c:	11000017 	ldw	r4,0(r2)
    8790:	21800217 	ldw	r6,8(r4)
    8794:	0008f441 	jmpi	8f44 <_putc_r>

00008798 <_puts_r>:
    8798:	defffd04 	addi	sp,sp,-12
    879c:	dc000015 	stw	r16,0(sp)
    87a0:	2021883a 	mov	r16,r4
    87a4:	2809883a 	mov	r4,r5
    87a8:	dfc00215 	stw	ra,8(sp)
    87ac:	dc400115 	stw	r17,4(sp)
    87b0:	2823883a 	mov	r17,r5
    87b4:	000882c0 	call	882c <strlen>
    87b8:	81400217 	ldw	r5,8(r16)
    87bc:	00c00074 	movhi	r3,1
    87c0:	18e39104 	addi	r3,r3,-29116
    87c4:	28c00115 	stw	r3,4(r5)
    87c8:	8009883a 	mov	r4,r16
    87cc:	880d883a 	mov	r6,r17
    87d0:	100f883a 	mov	r7,r2
    87d4:	0008e440 	call	8e44 <__sfvwrite_small_dev>
    87d8:	00ffffc4 	movi	r3,-1
    87dc:	10c00926 	beq	r2,r3,8804 <_puts_r+0x6c>
    87e0:	81400217 	ldw	r5,8(r16)
    87e4:	01800074 	movhi	r6,1
    87e8:	8009883a 	mov	r4,r16
    87ec:	28800117 	ldw	r2,4(r5)
    87f0:	31abae04 	addi	r6,r6,-20808
    87f4:	01c00044 	movi	r7,1
    87f8:	103ee83a 	callr	r2
    87fc:	10bfffe0 	cmpeqi	r2,r2,-1
    8800:	0085c83a 	sub	r2,zero,r2
    8804:	dfc00217 	ldw	ra,8(sp)
    8808:	dc400117 	ldw	r17,4(sp)
    880c:	dc000017 	ldw	r16,0(sp)
    8810:	dec00304 	addi	sp,sp,12
    8814:	f800283a 	ret

00008818 <puts>:
    8818:	00800074 	movhi	r2,1
    881c:	10ac7804 	addi	r2,r2,-20000
    8820:	200b883a 	mov	r5,r4
    8824:	11000017 	ldw	r4,0(r2)
    8828:	00087981 	jmpi	8798 <_puts_r>

0000882c <strlen>:
    882c:	2005883a 	mov	r2,r4
    8830:	10c00007 	ldb	r3,0(r2)
    8834:	18000226 	beq	r3,zero,8840 <strlen+0x14>
    8838:	10800044 	addi	r2,r2,1
    883c:	003ffc06 	br	8830 <_gp+0xffff5654>
    8840:	1105c83a 	sub	r2,r2,r4
    8844:	f800283a 	ret

00008848 <print_repeat>:
    8848:	defffb04 	addi	sp,sp,-20
    884c:	dc800315 	stw	r18,12(sp)
    8850:	dc400215 	stw	r17,8(sp)
    8854:	dc000115 	stw	r16,4(sp)
    8858:	dfc00415 	stw	ra,16(sp)
    885c:	2025883a 	mov	r18,r4
    8860:	2823883a 	mov	r17,r5
    8864:	d9800005 	stb	r6,0(sp)
    8868:	3821883a 	mov	r16,r7
    886c:	04000a0e 	bge	zero,r16,8898 <print_repeat+0x50>
    8870:	88800117 	ldw	r2,4(r17)
    8874:	9009883a 	mov	r4,r18
    8878:	880b883a 	mov	r5,r17
    887c:	d80d883a 	mov	r6,sp
    8880:	01c00044 	movi	r7,1
    8884:	103ee83a 	callr	r2
    8888:	843fffc4 	addi	r16,r16,-1
    888c:	103ff726 	beq	r2,zero,886c <_gp+0xffff5690>
    8890:	00bfffc4 	movi	r2,-1
    8894:	00000106 	br	889c <print_repeat+0x54>
    8898:	0005883a 	mov	r2,zero
    889c:	dfc00417 	ldw	ra,16(sp)
    88a0:	dc800317 	ldw	r18,12(sp)
    88a4:	dc400217 	ldw	r17,8(sp)
    88a8:	dc000117 	ldw	r16,4(sp)
    88ac:	dec00504 	addi	sp,sp,20
    88b0:	f800283a 	ret

000088b4 <___vfprintf_internal_r>:
    88b4:	deffe304 	addi	sp,sp,-116
    88b8:	d8c00804 	addi	r3,sp,32
    88bc:	df001b15 	stw	fp,108(sp)
    88c0:	ddc01a15 	stw	r23,104(sp)
    88c4:	dd801915 	stw	r22,100(sp)
    88c8:	dd401815 	stw	r21,96(sp)
    88cc:	dd001715 	stw	r20,92(sp)
    88d0:	dcc01615 	stw	r19,88(sp)
    88d4:	dc801515 	stw	r18,84(sp)
    88d8:	dc401415 	stw	r17,80(sp)
    88dc:	dc001315 	stw	r16,76(sp)
    88e0:	dfc01c15 	stw	ra,112(sp)
    88e4:	2029883a 	mov	r20,r4
    88e8:	2823883a 	mov	r17,r5
    88ec:	3839883a 	mov	fp,r7
    88f0:	d9800f15 	stw	r6,60(sp)
    88f4:	0021883a 	mov	r16,zero
    88f8:	d8000e15 	stw	zero,56(sp)
    88fc:	002f883a 	mov	r23,zero
    8900:	002b883a 	mov	r21,zero
    8904:	0027883a 	mov	r19,zero
    8908:	0025883a 	mov	r18,zero
    890c:	d8000c15 	stw	zero,48(sp)
    8910:	d8000b15 	stw	zero,44(sp)
    8914:	002d883a 	mov	r22,zero
    8918:	d8c00915 	stw	r3,36(sp)
    891c:	d8c00f17 	ldw	r3,60(sp)
    8920:	19000003 	ldbu	r4,0(r3)
    8924:	20803fcc 	andi	r2,r4,255
    8928:	1080201c 	xori	r2,r2,128
    892c:	10bfe004 	addi	r2,r2,-128
    8930:	10012e26 	beq	r2,zero,8dec <___vfprintf_internal_r+0x538>
    8934:	01400044 	movi	r5,1
    8938:	b1401426 	beq	r22,r5,898c <___vfprintf_internal_r+0xd8>
    893c:	2d800216 	blt	r5,r22,8948 <___vfprintf_internal_r+0x94>
    8940:	b0000626 	beq	r22,zero,895c <___vfprintf_internal_r+0xa8>
    8944:	00012506 	br	8ddc <___vfprintf_internal_r+0x528>
    8948:	01400084 	movi	r5,2
    894c:	b1401d26 	beq	r22,r5,89c4 <___vfprintf_internal_r+0x110>
    8950:	014000c4 	movi	r5,3
    8954:	b1402b26 	beq	r22,r5,8a04 <___vfprintf_internal_r+0x150>
    8958:	00012006 	br	8ddc <___vfprintf_internal_r+0x528>
    895c:	01400944 	movi	r5,37
    8960:	11410d26 	beq	r2,r5,8d98 <___vfprintf_internal_r+0x4e4>
    8964:	88800117 	ldw	r2,4(r17)
    8968:	d9000005 	stb	r4,0(sp)
    896c:	880b883a 	mov	r5,r17
    8970:	a009883a 	mov	r4,r20
    8974:	d80d883a 	mov	r6,sp
    8978:	01c00044 	movi	r7,1
    897c:	103ee83a 	callr	r2
    8980:	1000e81e 	bne	r2,zero,8d24 <___vfprintf_internal_r+0x470>
    8984:	84000044 	addi	r16,r16,1
    8988:	00011406 	br	8ddc <___vfprintf_internal_r+0x528>
    898c:	01400c04 	movi	r5,48
    8990:	11410a26 	beq	r2,r5,8dbc <___vfprintf_internal_r+0x508>
    8994:	01400944 	movi	r5,37
    8998:	11400a1e 	bne	r2,r5,89c4 <___vfprintf_internal_r+0x110>
    899c:	d8800005 	stb	r2,0(sp)
    89a0:	88800117 	ldw	r2,4(r17)
    89a4:	a009883a 	mov	r4,r20
    89a8:	880b883a 	mov	r5,r17
    89ac:	d80d883a 	mov	r6,sp
    89b0:	b00f883a 	mov	r7,r22
    89b4:	103ee83a 	callr	r2
    89b8:	1000da1e 	bne	r2,zero,8d24 <___vfprintf_internal_r+0x470>
    89bc:	84000044 	addi	r16,r16,1
    89c0:	00010506 	br	8dd8 <___vfprintf_internal_r+0x524>
    89c4:	25bff404 	addi	r22,r4,-48
    89c8:	b5803fcc 	andi	r22,r22,255
    89cc:	00c00244 	movi	r3,9
    89d0:	1d800936 	bltu	r3,r22,89f8 <___vfprintf_internal_r+0x144>
    89d4:	00bfffc4 	movi	r2,-1
    89d8:	90800426 	beq	r18,r2,89ec <___vfprintf_internal_r+0x138>
    89dc:	9009883a 	mov	r4,r18
    89e0:	01400284 	movi	r5,10
    89e4:	0008ff40 	call	8ff4 <__mulsi3>
    89e8:	00000106 	br	89f0 <___vfprintf_internal_r+0x13c>
    89ec:	0005883a 	mov	r2,zero
    89f0:	15a5883a 	add	r18,r2,r22
    89f4:	0000f206 	br	8dc0 <___vfprintf_internal_r+0x50c>
    89f8:	01400b84 	movi	r5,46
    89fc:	1140f426 	beq	r2,r5,8dd0 <___vfprintf_internal_r+0x51c>
    8a00:	05800084 	movi	r22,2
    8a04:	213ff404 	addi	r4,r4,-48
    8a08:	20c03fcc 	andi	r3,r4,255
    8a0c:	01000244 	movi	r4,9
    8a10:	20c00b36 	bltu	r4,r3,8a40 <___vfprintf_internal_r+0x18c>
    8a14:	00bfffc4 	movi	r2,-1
    8a18:	98800626 	beq	r19,r2,8a34 <___vfprintf_internal_r+0x180>
    8a1c:	9809883a 	mov	r4,r19
    8a20:	01400284 	movi	r5,10
    8a24:	d8c01115 	stw	r3,68(sp)
    8a28:	0008ff40 	call	8ff4 <__mulsi3>
    8a2c:	d8c01117 	ldw	r3,68(sp)
    8a30:	00000106 	br	8a38 <___vfprintf_internal_r+0x184>
    8a34:	0005883a 	mov	r2,zero
    8a38:	10e7883a 	add	r19,r2,r3
    8a3c:	0000e706 	br	8ddc <___vfprintf_internal_r+0x528>
    8a40:	01401b04 	movi	r5,108
    8a44:	1140e026 	beq	r2,r5,8dc8 <___vfprintf_internal_r+0x514>
    8a48:	013fffc4 	movi	r4,-1
    8a4c:	99000226 	beq	r19,r4,8a58 <___vfprintf_internal_r+0x1a4>
    8a50:	d8000b15 	stw	zero,44(sp)
    8a54:	00000106 	br	8a5c <___vfprintf_internal_r+0x1a8>
    8a58:	04c00044 	movi	r19,1
    8a5c:	01001a44 	movi	r4,105
    8a60:	11001626 	beq	r2,r4,8abc <___vfprintf_internal_r+0x208>
    8a64:	20800916 	blt	r4,r2,8a8c <___vfprintf_internal_r+0x1d8>
    8a68:	010018c4 	movi	r4,99
    8a6c:	11009626 	beq	r2,r4,8cc8 <___vfprintf_internal_r+0x414>
    8a70:	01001904 	movi	r4,100
    8a74:	11001126 	beq	r2,r4,8abc <___vfprintf_internal_r+0x208>
    8a78:	01001604 	movi	r4,88
    8a7c:	1100d61e 	bne	r2,r4,8dd8 <___vfprintf_internal_r+0x524>
    8a80:	00c00044 	movi	r3,1
    8a84:	d8c00e15 	stw	r3,56(sp)
    8a88:	00001406 	br	8adc <___vfprintf_internal_r+0x228>
    8a8c:	01001cc4 	movi	r4,115
    8a90:	1100a626 	beq	r2,r4,8d2c <___vfprintf_internal_r+0x478>
    8a94:	20800416 	blt	r4,r2,8aa8 <___vfprintf_internal_r+0x1f4>
    8a98:	01001bc4 	movi	r4,111
    8a9c:	1100ce1e 	bne	r2,r4,8dd8 <___vfprintf_internal_r+0x524>
    8aa0:	05400204 	movi	r21,8
    8aa4:	00000e06 	br	8ae0 <___vfprintf_internal_r+0x22c>
    8aa8:	01001d44 	movi	r4,117
    8aac:	11000c26 	beq	r2,r4,8ae0 <___vfprintf_internal_r+0x22c>
    8ab0:	01001e04 	movi	r4,120
    8ab4:	11000926 	beq	r2,r4,8adc <___vfprintf_internal_r+0x228>
    8ab8:	0000c706 	br	8dd8 <___vfprintf_internal_r+0x524>
    8abc:	e0800104 	addi	r2,fp,4
    8ac0:	b8000726 	beq	r23,zero,8ae0 <___vfprintf_internal_r+0x22c>
    8ac4:	d8800d15 	stw	r2,52(sp)
    8ac8:	e7000017 	ldw	fp,0(fp)
    8acc:	e000080e 	bge	fp,zero,8af0 <___vfprintf_internal_r+0x23c>
    8ad0:	0739c83a 	sub	fp,zero,fp
    8ad4:	02000044 	movi	r8,1
    8ad8:	00000606 	br	8af4 <___vfprintf_internal_r+0x240>
    8adc:	05400404 	movi	r21,16
    8ae0:	e0c00104 	addi	r3,fp,4
    8ae4:	d8c00d15 	stw	r3,52(sp)
    8ae8:	e7000017 	ldw	fp,0(fp)
    8aec:	002f883a 	mov	r23,zero
    8af0:	0011883a 	mov	r8,zero
    8af4:	002d883a 	mov	r22,zero
    8af8:	dd87883a 	add	r3,sp,r22
    8afc:	e0001a26 	beq	fp,zero,8b68 <___vfprintf_internal_r+0x2b4>
    8b00:	e009883a 	mov	r4,fp
    8b04:	a80b883a 	mov	r5,r21
    8b08:	d8c01115 	stw	r3,68(sp)
    8b0c:	da001215 	stw	r8,72(sp)
    8b10:	00086e00 	call	86e0 <__udivsi3>
    8b14:	a809883a 	mov	r4,r21
    8b18:	100b883a 	mov	r5,r2
    8b1c:	d8801015 	stw	r2,64(sp)
    8b20:	0008ff40 	call	8ff4 <__mulsi3>
    8b24:	e085c83a 	sub	r2,fp,r2
    8b28:	01000244 	movi	r4,9
    8b2c:	d8c01117 	ldw	r3,68(sp)
    8b30:	d9801017 	ldw	r6,64(sp)
    8b34:	da001217 	ldw	r8,72(sp)
    8b38:	20800216 	blt	r4,r2,8b44 <___vfprintf_internal_r+0x290>
    8b3c:	17000c04 	addi	fp,r2,48
    8b40:	00000506 	br	8b58 <___vfprintf_internal_r+0x2a4>
    8b44:	d9400e17 	ldw	r5,56(sp)
    8b48:	28000226 	beq	r5,zero,8b54 <___vfprintf_internal_r+0x2a0>
    8b4c:	17000dc4 	addi	fp,r2,55
    8b50:	00000106 	br	8b58 <___vfprintf_internal_r+0x2a4>
    8b54:	170015c4 	addi	fp,r2,87
    8b58:	1f000005 	stb	fp,0(r3)
    8b5c:	b5800044 	addi	r22,r22,1
    8b60:	3039883a 	mov	fp,r6
    8b64:	003fe406 	br	8af8 <_gp+0xffff591c>
    8b68:	1ec5c83a 	sub	r2,r3,sp
    8b6c:	d8800a15 	stw	r2,40(sp)
    8b70:	9885c83a 	sub	r2,r19,r2
    8b74:	1839883a 	mov	fp,r3
    8b78:	00800e0e 	bge	zero,r2,8bb4 <___vfprintf_internal_r+0x300>
    8b7c:	182d883a 	mov	r22,r3
    8b80:	1885883a 	add	r2,r3,r2
    8b84:	01000c04 	movi	r4,48
    8b88:	d9400917 	ldw	r5,36(sp)
    8b8c:	b007883a 	mov	r3,r22
    8b90:	b140052e 	bgeu	r22,r5,8ba8 <___vfprintf_internal_r+0x2f4>
    8b94:	b5800044 	addi	r22,r22,1
    8b98:	19000005 	stb	r4,0(r3)
    8b9c:	b039883a 	mov	fp,r22
    8ba0:	b0bff91e 	bne	r22,r2,8b88 <_gp+0xffff59ac>
    8ba4:	00000106 	br	8bac <___vfprintf_internal_r+0x2f8>
    8ba8:	b039883a 	mov	fp,r22
    8bac:	b6edc83a 	sub	r22,r22,sp
    8bb0:	dd800a15 	stw	r22,40(sp)
    8bb4:	d8800a17 	ldw	r2,40(sp)
    8bb8:	1207883a 	add	r3,r2,r8
    8bbc:	90edc83a 	sub	r22,r18,r3
    8bc0:	d8c00b17 	ldw	r3,44(sp)
    8bc4:	18001726 	beq	r3,zero,8c24 <___vfprintf_internal_r+0x370>
    8bc8:	40000a26 	beq	r8,zero,8bf4 <___vfprintf_internal_r+0x340>
    8bcc:	00800b44 	movi	r2,45
    8bd0:	d8800805 	stb	r2,32(sp)
    8bd4:	88800117 	ldw	r2,4(r17)
    8bd8:	a009883a 	mov	r4,r20
    8bdc:	880b883a 	mov	r5,r17
    8be0:	d9800804 	addi	r6,sp,32
    8be4:	01c00044 	movi	r7,1
    8be8:	103ee83a 	callr	r2
    8bec:	10004d1e 	bne	r2,zero,8d24 <___vfprintf_internal_r+0x470>
    8bf0:	84000044 	addi	r16,r16,1
    8bf4:	0580070e 	bge	zero,r22,8c14 <___vfprintf_internal_r+0x360>
    8bf8:	a009883a 	mov	r4,r20
    8bfc:	880b883a 	mov	r5,r17
    8c00:	01800c04 	movi	r6,48
    8c04:	b00f883a 	mov	r7,r22
    8c08:	00088480 	call	8848 <print_repeat>
    8c0c:	1000451e 	bne	r2,zero,8d24 <___vfprintf_internal_r+0x470>
    8c10:	85a1883a 	add	r16,r16,r22
    8c14:	d9000a17 	ldw	r4,40(sp)
    8c18:	e007883a 	mov	r3,fp
    8c1c:	272dc83a 	sub	r22,r4,fp
    8c20:	00002206 	br	8cac <___vfprintf_internal_r+0x3f8>
    8c24:	0580090e 	bge	zero,r22,8c4c <___vfprintf_internal_r+0x398>
    8c28:	a009883a 	mov	r4,r20
    8c2c:	880b883a 	mov	r5,r17
    8c30:	01800804 	movi	r6,32
    8c34:	b00f883a 	mov	r7,r22
    8c38:	da001215 	stw	r8,72(sp)
    8c3c:	00088480 	call	8848 <print_repeat>
    8c40:	da001217 	ldw	r8,72(sp)
    8c44:	1000371e 	bne	r2,zero,8d24 <___vfprintf_internal_r+0x470>
    8c48:	85a1883a 	add	r16,r16,r22
    8c4c:	403ff126 	beq	r8,zero,8c14 <_gp+0xffff5a38>
    8c50:	00800b44 	movi	r2,45
    8c54:	d8800805 	stb	r2,32(sp)
    8c58:	88800117 	ldw	r2,4(r17)
    8c5c:	a009883a 	mov	r4,r20
    8c60:	880b883a 	mov	r5,r17
    8c64:	d9800804 	addi	r6,sp,32
    8c68:	01c00044 	movi	r7,1
    8c6c:	103ee83a 	callr	r2
    8c70:	10002c1e 	bne	r2,zero,8d24 <___vfprintf_internal_r+0x470>
    8c74:	84000044 	addi	r16,r16,1
    8c78:	003fe606 	br	8c14 <_gp+0xffff5a38>
    8c7c:	18ffffc4 	addi	r3,r3,-1
    8c80:	18800003 	ldbu	r2,0(r3)
    8c84:	a009883a 	mov	r4,r20
    8c88:	d8c01115 	stw	r3,68(sp)
    8c8c:	d8800805 	stb	r2,32(sp)
    8c90:	88800117 	ldw	r2,4(r17)
    8c94:	880b883a 	mov	r5,r17
    8c98:	d9800804 	addi	r6,sp,32
    8c9c:	01c00044 	movi	r7,1
    8ca0:	103ee83a 	callr	r2
    8ca4:	d8c01117 	ldw	r3,68(sp)
    8ca8:	10001e1e 	bne	r2,zero,8d24 <___vfprintf_internal_r+0x470>
    8cac:	80c5c83a 	sub	r2,r16,r3
    8cb0:	1d89883a 	add	r4,r3,r22
    8cb4:	e085883a 	add	r2,fp,r2
    8cb8:	013ff016 	blt	zero,r4,8c7c <_gp+0xffff5aa0>
    8cbc:	1021883a 	mov	r16,r2
    8cc0:	df000d17 	ldw	fp,52(sp)
    8cc4:	00004406 	br	8dd8 <___vfprintf_internal_r+0x524>
    8cc8:	01000044 	movi	r4,1
    8ccc:	2480080e 	bge	r4,r18,8cf0 <___vfprintf_internal_r+0x43c>
    8cd0:	95bfffc4 	addi	r22,r18,-1
    8cd4:	a009883a 	mov	r4,r20
    8cd8:	880b883a 	mov	r5,r17
    8cdc:	01800804 	movi	r6,32
    8ce0:	b00f883a 	mov	r7,r22
    8ce4:	00088480 	call	8848 <print_repeat>
    8ce8:	10000e1e 	bne	r2,zero,8d24 <___vfprintf_internal_r+0x470>
    8cec:	85a1883a 	add	r16,r16,r22
    8cf0:	e0800017 	ldw	r2,0(fp)
    8cf4:	a009883a 	mov	r4,r20
    8cf8:	880b883a 	mov	r5,r17
    8cfc:	d8800005 	stb	r2,0(sp)
    8d00:	88800117 	ldw	r2,4(r17)
    8d04:	d80d883a 	mov	r6,sp
    8d08:	01c00044 	movi	r7,1
    8d0c:	e5800104 	addi	r22,fp,4
    8d10:	103ee83a 	callr	r2
    8d14:	1000031e 	bne	r2,zero,8d24 <___vfprintf_internal_r+0x470>
    8d18:	84000044 	addi	r16,r16,1
    8d1c:	b039883a 	mov	fp,r22
    8d20:	00002d06 	br	8dd8 <___vfprintf_internal_r+0x524>
    8d24:	00bfffc4 	movi	r2,-1
    8d28:	00003106 	br	8df0 <___vfprintf_internal_r+0x53c>
    8d2c:	e5800017 	ldw	r22,0(fp)
    8d30:	e0c00104 	addi	r3,fp,4
    8d34:	d8c00a15 	stw	r3,40(sp)
    8d38:	b009883a 	mov	r4,r22
    8d3c:	000882c0 	call	882c <strlen>
    8d40:	9091c83a 	sub	r8,r18,r2
    8d44:	1039883a 	mov	fp,r2
    8d48:	0200090e 	bge	zero,r8,8d70 <___vfprintf_internal_r+0x4bc>
    8d4c:	400f883a 	mov	r7,r8
    8d50:	a009883a 	mov	r4,r20
    8d54:	880b883a 	mov	r5,r17
    8d58:	01800804 	movi	r6,32
    8d5c:	da001215 	stw	r8,72(sp)
    8d60:	00088480 	call	8848 <print_repeat>
    8d64:	da001217 	ldw	r8,72(sp)
    8d68:	103fee1e 	bne	r2,zero,8d24 <_gp+0xffff5b48>
    8d6c:	8221883a 	add	r16,r16,r8
    8d70:	88800117 	ldw	r2,4(r17)
    8d74:	a009883a 	mov	r4,r20
    8d78:	880b883a 	mov	r5,r17
    8d7c:	b00d883a 	mov	r6,r22
    8d80:	e00f883a 	mov	r7,fp
    8d84:	103ee83a 	callr	r2
    8d88:	103fe61e 	bne	r2,zero,8d24 <_gp+0xffff5b48>
    8d8c:	8721883a 	add	r16,r16,fp
    8d90:	df000a17 	ldw	fp,40(sp)
    8d94:	00001006 	br	8dd8 <___vfprintf_internal_r+0x524>
    8d98:	05c00044 	movi	r23,1
    8d9c:	04ffffc4 	movi	r19,-1
    8da0:	d8000e15 	stw	zero,56(sp)
    8da4:	05400284 	movi	r21,10
    8da8:	9825883a 	mov	r18,r19
    8dac:	d8000c15 	stw	zero,48(sp)
    8db0:	d8000b15 	stw	zero,44(sp)
    8db4:	b82d883a 	mov	r22,r23
    8db8:	00000806 	br	8ddc <___vfprintf_internal_r+0x528>
    8dbc:	dd800b15 	stw	r22,44(sp)
    8dc0:	05800084 	movi	r22,2
    8dc4:	00000506 	br	8ddc <___vfprintf_internal_r+0x528>
    8dc8:	00c00044 	movi	r3,1
    8dcc:	d8c00c15 	stw	r3,48(sp)
    8dd0:	058000c4 	movi	r22,3
    8dd4:	00000106 	br	8ddc <___vfprintf_internal_r+0x528>
    8dd8:	002d883a 	mov	r22,zero
    8ddc:	d8c00f17 	ldw	r3,60(sp)
    8de0:	18c00044 	addi	r3,r3,1
    8de4:	d8c00f15 	stw	r3,60(sp)
    8de8:	003ecc06 	br	891c <_gp+0xffff5740>
    8dec:	8005883a 	mov	r2,r16
    8df0:	dfc01c17 	ldw	ra,112(sp)
    8df4:	df001b17 	ldw	fp,108(sp)
    8df8:	ddc01a17 	ldw	r23,104(sp)
    8dfc:	dd801917 	ldw	r22,100(sp)
    8e00:	dd401817 	ldw	r21,96(sp)
    8e04:	dd001717 	ldw	r20,92(sp)
    8e08:	dcc01617 	ldw	r19,88(sp)
    8e0c:	dc801517 	ldw	r18,84(sp)
    8e10:	dc401417 	ldw	r17,80(sp)
    8e14:	dc001317 	ldw	r16,76(sp)
    8e18:	dec01d04 	addi	sp,sp,116
    8e1c:	f800283a 	ret

00008e20 <__vfprintf_internal>:
    8e20:	2007883a 	mov	r3,r4
    8e24:	01000074 	movhi	r4,1
    8e28:	212c7804 	addi	r4,r4,-20000
    8e2c:	21000017 	ldw	r4,0(r4)
    8e30:	2805883a 	mov	r2,r5
    8e34:	300f883a 	mov	r7,r6
    8e38:	180b883a 	mov	r5,r3
    8e3c:	100d883a 	mov	r6,r2
    8e40:	00088b41 	jmpi	88b4 <___vfprintf_internal_r>

00008e44 <__sfvwrite_small_dev>:
    8e44:	2880000b 	ldhu	r2,0(r5)
    8e48:	defffa04 	addi	sp,sp,-24
    8e4c:	dc000015 	stw	r16,0(sp)
    8e50:	dfc00515 	stw	ra,20(sp)
    8e54:	dd000415 	stw	r20,16(sp)
    8e58:	dcc00315 	stw	r19,12(sp)
    8e5c:	dc800215 	stw	r18,8(sp)
    8e60:	dc400115 	stw	r17,4(sp)
    8e64:	1080020c 	andi	r2,r2,8
    8e68:	2821883a 	mov	r16,r5
    8e6c:	10001726 	beq	r2,zero,8ecc <__sfvwrite_small_dev+0x88>
    8e70:	2880008f 	ldh	r2,2(r5)
    8e74:	10001216 	blt	r2,zero,8ec0 <__sfvwrite_small_dev+0x7c>
    8e78:	2027883a 	mov	r19,r4
    8e7c:	3025883a 	mov	r18,r6
    8e80:	3823883a 	mov	r17,r7
    8e84:	05010004 	movi	r20,1024
    8e88:	04400b0e 	bge	zero,r17,8eb8 <__sfvwrite_small_dev+0x74>
    8e8c:	8140008f 	ldh	r5,2(r16)
    8e90:	880f883a 	mov	r7,r17
    8e94:	a440010e 	bge	r20,r17,8e9c <__sfvwrite_small_dev+0x58>
    8e98:	01c10004 	movi	r7,1024
    8e9c:	9809883a 	mov	r4,r19
    8ea0:	900d883a 	mov	r6,r18
    8ea4:	0008f9c0 	call	8f9c <_write_r>
    8ea8:	0080050e 	bge	zero,r2,8ec0 <__sfvwrite_small_dev+0x7c>
    8eac:	88a3c83a 	sub	r17,r17,r2
    8eb0:	90a5883a 	add	r18,r18,r2
    8eb4:	003ff406 	br	8e88 <_gp+0xffff5cac>
    8eb8:	0005883a 	mov	r2,zero
    8ebc:	00000406 	br	8ed0 <__sfvwrite_small_dev+0x8c>
    8ec0:	8080000b 	ldhu	r2,0(r16)
    8ec4:	10801014 	ori	r2,r2,64
    8ec8:	8080000d 	sth	r2,0(r16)
    8ecc:	00bfffc4 	movi	r2,-1
    8ed0:	dfc00517 	ldw	ra,20(sp)
    8ed4:	dd000417 	ldw	r20,16(sp)
    8ed8:	dcc00317 	ldw	r19,12(sp)
    8edc:	dc800217 	ldw	r18,8(sp)
    8ee0:	dc400117 	ldw	r17,4(sp)
    8ee4:	dc000017 	ldw	r16,0(sp)
    8ee8:	dec00604 	addi	sp,sp,24
    8eec:	f800283a 	ret

00008ef0 <putc>:
    8ef0:	defffd04 	addi	sp,sp,-12
    8ef4:	00800074 	movhi	r2,1
    8ef8:	dc000115 	stw	r16,4(sp)
    8efc:	dfc00215 	stw	ra,8(sp)
    8f00:	10a39104 	addi	r2,r2,-29116
    8f04:	28800115 	stw	r2,4(r5)
    8f08:	00800074 	movhi	r2,1
    8f0c:	10ac7804 	addi	r2,r2,-20000
    8f10:	d9000005 	stb	r4,0(sp)
    8f14:	2021883a 	mov	r16,r4
    8f18:	11000017 	ldw	r4,0(r2)
    8f1c:	d80d883a 	mov	r6,sp
    8f20:	01c00044 	movi	r7,1
    8f24:	0008e440 	call	8e44 <__sfvwrite_small_dev>
    8f28:	00ffffc4 	movi	r3,-1
    8f2c:	10c00126 	beq	r2,r3,8f34 <putc+0x44>
    8f30:	8005883a 	mov	r2,r16
    8f34:	dfc00217 	ldw	ra,8(sp)
    8f38:	dc000117 	ldw	r16,4(sp)
    8f3c:	dec00304 	addi	sp,sp,12
    8f40:	f800283a 	ret

00008f44 <_putc_r>:
    8f44:	defffd04 	addi	sp,sp,-12
    8f48:	00800074 	movhi	r2,1
    8f4c:	dc000115 	stw	r16,4(sp)
    8f50:	dfc00215 	stw	ra,8(sp)
    8f54:	10a39104 	addi	r2,r2,-29116
    8f58:	30800115 	stw	r2,4(r6)
    8f5c:	00800074 	movhi	r2,1
    8f60:	10ac7804 	addi	r2,r2,-20000
    8f64:	11000017 	ldw	r4,0(r2)
    8f68:	2821883a 	mov	r16,r5
    8f6c:	01c00044 	movi	r7,1
    8f70:	300b883a 	mov	r5,r6
    8f74:	d80d883a 	mov	r6,sp
    8f78:	dc000005 	stb	r16,0(sp)
    8f7c:	0008e440 	call	8e44 <__sfvwrite_small_dev>
    8f80:	00ffffc4 	movi	r3,-1
    8f84:	10c00126 	beq	r2,r3,8f8c <_putc_r+0x48>
    8f88:	8005883a 	mov	r2,r16
    8f8c:	dfc00217 	ldw	ra,8(sp)
    8f90:	dc000117 	ldw	r16,4(sp)
    8f94:	dec00304 	addi	sp,sp,12
    8f98:	f800283a 	ret

00008f9c <_write_r>:
    8f9c:	defffd04 	addi	sp,sp,-12
    8fa0:	dc000015 	stw	r16,0(sp)
    8fa4:	04000074 	movhi	r16,1
    8fa8:	dc400115 	stw	r17,4(sp)
    8fac:	842d4704 	addi	r16,r16,-19172
    8fb0:	2023883a 	mov	r17,r4
    8fb4:	2809883a 	mov	r4,r5
    8fb8:	300b883a 	mov	r5,r6
    8fbc:	380d883a 	mov	r6,r7
    8fc0:	dfc00215 	stw	ra,8(sp)
    8fc4:	80000015 	stw	zero,0(r16)
    8fc8:	00091e80 	call	91e8 <write>
    8fcc:	00ffffc4 	movi	r3,-1
    8fd0:	10c0031e 	bne	r2,r3,8fe0 <_write_r+0x44>
    8fd4:	80c00017 	ldw	r3,0(r16)
    8fd8:	18000126 	beq	r3,zero,8fe0 <_write_r+0x44>
    8fdc:	88c00015 	stw	r3,0(r17)
    8fe0:	dfc00217 	ldw	ra,8(sp)
    8fe4:	dc400117 	ldw	r17,4(sp)
    8fe8:	dc000017 	ldw	r16,0(sp)
    8fec:	dec00304 	addi	sp,sp,12
    8ff0:	f800283a 	ret

00008ff4 <__mulsi3>:
    8ff4:	0005883a 	mov	r2,zero
    8ff8:	20000726 	beq	r4,zero,9018 <__mulsi3+0x24>
    8ffc:	20c0004c 	andi	r3,r4,1
    9000:	2008d07a 	srli	r4,r4,1
    9004:	18000126 	beq	r3,zero,900c <__mulsi3+0x18>
    9008:	1145883a 	add	r2,r2,r5
    900c:	294b883a 	add	r5,r5,r5
    9010:	203ffa1e 	bne	r4,zero,8ffc <_gp+0xffff5e20>
    9014:	f800283a 	ret
    9018:	f800283a 	ret

0000901c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    901c:	defffc04 	addi	sp,sp,-16
    9020:	df000315 	stw	fp,12(sp)
    9024:	df000304 	addi	fp,sp,12
    9028:	e13ffd15 	stw	r4,-12(fp)
    902c:	e17ffe15 	stw	r5,-8(fp)
    9030:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9034:	e0fffe17 	ldw	r3,-8(fp)
    9038:	e0bffd17 	ldw	r2,-12(fp)
    903c:	18800c26 	beq	r3,r2,9070 <alt_load_section+0x54>
  {
    while( to != end )
    9040:	00000806 	br	9064 <alt_load_section+0x48>
    {
      *to++ = *from++;
    9044:	e0bffe17 	ldw	r2,-8(fp)
    9048:	10c00104 	addi	r3,r2,4
    904c:	e0fffe15 	stw	r3,-8(fp)
    9050:	e0fffd17 	ldw	r3,-12(fp)
    9054:	19000104 	addi	r4,r3,4
    9058:	e13ffd15 	stw	r4,-12(fp)
    905c:	18c00017 	ldw	r3,0(r3)
    9060:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9064:	e0fffe17 	ldw	r3,-8(fp)
    9068:	e0bfff17 	ldw	r2,-4(fp)
    906c:	18bff51e 	bne	r3,r2,9044 <_gp+0xffff5e68>
    {
      *to++ = *from++;
    }
  }
}
    9070:	e037883a 	mov	sp,fp
    9074:	df000017 	ldw	fp,0(sp)
    9078:	dec00104 	addi	sp,sp,4
    907c:	f800283a 	ret

00009080 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9080:	defffe04 	addi	sp,sp,-8
    9084:	dfc00115 	stw	ra,4(sp)
    9088:	df000015 	stw	fp,0(sp)
    908c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9090:	01000074 	movhi	r4,1
    9094:	212c8204 	addi	r4,r4,-19960
    9098:	01400074 	movhi	r5,1
    909c:	296bbf04 	addi	r5,r5,-20740
    90a0:	01800074 	movhi	r6,1
    90a4:	31ac8204 	addi	r6,r6,-19960
    90a8:	000901c0 	call	901c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    90ac:	01000074 	movhi	r4,1
    90b0:	21200804 	addi	r4,r4,-32736
    90b4:	01400074 	movhi	r5,1
    90b8:	29600804 	addi	r5,r5,-32736
    90bc:	01800074 	movhi	r6,1
    90c0:	31a08b04 	addi	r6,r6,-32212
    90c4:	000901c0 	call	901c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    90c8:	01000074 	movhi	r4,1
    90cc:	212b7604 	addi	r4,r4,-21032
    90d0:	01400074 	movhi	r5,1
    90d4:	296b7604 	addi	r5,r5,-21032
    90d8:	01800074 	movhi	r6,1
    90dc:	31abbf04 	addi	r6,r6,-20740
    90e0:	000901c0 	call	901c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    90e4:	0009e440 	call	9e44 <alt_dcache_flush_all>
  alt_icache_flush_all();
    90e8:	000a0100 	call	a010 <alt_icache_flush_all>
}
    90ec:	e037883a 	mov	sp,fp
    90f0:	dfc00117 	ldw	ra,4(sp)
    90f4:	df000017 	ldw	fp,0(sp)
    90f8:	dec00204 	addi	sp,sp,8
    90fc:	f800283a 	ret

00009100 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9100:	defffd04 	addi	sp,sp,-12
    9104:	dfc00215 	stw	ra,8(sp)
    9108:	df000115 	stw	fp,4(sp)
    910c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9110:	0009883a 	mov	r4,zero
    9114:	00093200 	call	9320 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    9118:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    911c:	00093540 	call	9354 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9120:	01000074 	movhi	r4,1
    9124:	212baf04 	addi	r4,r4,-20804
    9128:	01400074 	movhi	r5,1
    912c:	296baf04 	addi	r5,r5,-20804
    9130:	01800074 	movhi	r6,1
    9134:	31abaf04 	addi	r6,r6,-20804
    9138:	000a3dc0 	call	a3dc <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    913c:	d120d117 	ldw	r4,-31932(gp)
    9140:	d0e0d217 	ldw	r3,-31928(gp)
    9144:	d0a0d317 	ldw	r2,-31924(gp)
    9148:	180b883a 	mov	r5,r3
    914c:	100d883a 	mov	r6,r2
    9150:	00084c40 	call	84c4 <main>
    9154:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9158:	01000044 	movi	r4,1
    915c:	0009d6c0 	call	9d6c <close>
  exit (result);
    9160:	e13fff17 	ldw	r4,-4(fp)
    9164:	000abb80 	call	abb8 <exit>

00009168 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    9168:	defffd04 	addi	sp,sp,-12
    916c:	dfc00215 	stw	ra,8(sp)
    9170:	df000115 	stw	fp,4(sp)
    9174:	df000104 	addi	fp,sp,4
    9178:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    917c:	e13fff17 	ldw	r4,-4(fp)
    9180:	0009bc40 	call	9bc4 <alt_busy_sleep>
}
    9184:	e037883a 	mov	sp,fp
    9188:	dfc00117 	ldw	ra,4(sp)
    918c:	df000017 	ldw	fp,0(sp)
    9190:	dec00204 	addi	sp,sp,8
    9194:	f800283a 	ret

00009198 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9198:	defffe04 	addi	sp,sp,-8
    919c:	dfc00115 	stw	ra,4(sp)
    91a0:	df000015 	stw	fp,0(sp)
    91a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    91a8:	00800074 	movhi	r2,1
    91ac:	10ac7e04 	addi	r2,r2,-19976
    91b0:	10800017 	ldw	r2,0(r2)
    91b4:	10000526 	beq	r2,zero,91cc <alt_get_errno+0x34>
    91b8:	00800074 	movhi	r2,1
    91bc:	10ac7e04 	addi	r2,r2,-19976
    91c0:	10800017 	ldw	r2,0(r2)
    91c4:	103ee83a 	callr	r2
    91c8:	00000206 	br	91d4 <alt_get_errno+0x3c>
    91cc:	00800074 	movhi	r2,1
    91d0:	10ad4704 	addi	r2,r2,-19172
}
    91d4:	e037883a 	mov	sp,fp
    91d8:	dfc00117 	ldw	ra,4(sp)
    91dc:	df000017 	ldw	fp,0(sp)
    91e0:	dec00204 	addi	sp,sp,8
    91e4:	f800283a 	ret

000091e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    91e8:	defff904 	addi	sp,sp,-28
    91ec:	dfc00615 	stw	ra,24(sp)
    91f0:	df000515 	stw	fp,20(sp)
    91f4:	df000504 	addi	fp,sp,20
    91f8:	e13ffd15 	stw	r4,-12(fp)
    91fc:	e17ffe15 	stw	r5,-8(fp)
    9200:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9204:	e0bffd17 	ldw	r2,-12(fp)
    9208:	10000816 	blt	r2,zero,922c <write+0x44>
    920c:	e13ffd17 	ldw	r4,-12(fp)
    9210:	01400304 	movi	r5,12
    9214:	0008ff40 	call	8ff4 <__mulsi3>
    9218:	1007883a 	mov	r3,r2
    921c:	00800074 	movhi	r2,1
    9220:	10ac1704 	addi	r2,r2,-20388
    9224:	1885883a 	add	r2,r3,r2
    9228:	00000106 	br	9230 <write+0x48>
    922c:	0005883a 	mov	r2,zero
    9230:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9234:	e0bffb17 	ldw	r2,-20(fp)
    9238:	10002126 	beq	r2,zero,92c0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    923c:	e0bffb17 	ldw	r2,-20(fp)
    9240:	10800217 	ldw	r2,8(r2)
    9244:	108000cc 	andi	r2,r2,3
    9248:	10001826 	beq	r2,zero,92ac <write+0xc4>
    924c:	e0bffb17 	ldw	r2,-20(fp)
    9250:	10800017 	ldw	r2,0(r2)
    9254:	10800617 	ldw	r2,24(r2)
    9258:	10001426 	beq	r2,zero,92ac <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    925c:	e0bffb17 	ldw	r2,-20(fp)
    9260:	10800017 	ldw	r2,0(r2)
    9264:	10800617 	ldw	r2,24(r2)
    9268:	e0ffff17 	ldw	r3,-4(fp)
    926c:	e13ffb17 	ldw	r4,-20(fp)
    9270:	e17ffe17 	ldw	r5,-8(fp)
    9274:	180d883a 	mov	r6,r3
    9278:	103ee83a 	callr	r2
    927c:	e0bffc15 	stw	r2,-16(fp)
    9280:	e0bffc17 	ldw	r2,-16(fp)
    9284:	1000070e 	bge	r2,zero,92a4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    9288:	00091980 	call	9198 <alt_get_errno>
    928c:	1007883a 	mov	r3,r2
    9290:	e0bffc17 	ldw	r2,-16(fp)
    9294:	0085c83a 	sub	r2,zero,r2
    9298:	18800015 	stw	r2,0(r3)
        return -1;
    929c:	00bfffc4 	movi	r2,-1
    92a0:	00000c06 	br	92d4 <write+0xec>
      }
      return rval;
    92a4:	e0bffc17 	ldw	r2,-16(fp)
    92a8:	00000a06 	br	92d4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    92ac:	00091980 	call	9198 <alt_get_errno>
    92b0:	1007883a 	mov	r3,r2
    92b4:	00800344 	movi	r2,13
    92b8:	18800015 	stw	r2,0(r3)
    92bc:	00000406 	br	92d0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    92c0:	00091980 	call	9198 <alt_get_errno>
    92c4:	1007883a 	mov	r3,r2
    92c8:	00801444 	movi	r2,81
    92cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    92d0:	00bfffc4 	movi	r2,-1
}
    92d4:	e037883a 	mov	sp,fp
    92d8:	dfc00117 	ldw	ra,4(sp)
    92dc:	df000017 	ldw	fp,0(sp)
    92e0:	dec00204 	addi	sp,sp,8
    92e4:	f800283a 	ret

000092e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    92e8:	defffd04 	addi	sp,sp,-12
    92ec:	dfc00215 	stw	ra,8(sp)
    92f0:	df000115 	stw	fp,4(sp)
    92f4:	df000104 	addi	fp,sp,4
    92f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    92fc:	e13fff17 	ldw	r4,-4(fp)
    9300:	01400074 	movhi	r5,1
    9304:	296c7b04 	addi	r5,r5,-19988
    9308:	0009edc0 	call	9edc <alt_dev_llist_insert>
}
    930c:	e037883a 	mov	sp,fp
    9310:	dfc00117 	ldw	ra,4(sp)
    9314:	df000017 	ldw	fp,0(sp)
    9318:	dec00204 	addi	sp,sp,8
    931c:	f800283a 	ret

00009320 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9320:	defffd04 	addi	sp,sp,-12
    9324:	dfc00215 	stw	ra,8(sp)
    9328:	df000115 	stw	fp,4(sp)
    932c:	df000104 	addi	fp,sp,4
    9330:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    9334:	000a9140 	call	a914 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9338:	00800044 	movi	r2,1
    933c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9340:	e037883a 	mov	sp,fp
    9344:	dfc00117 	ldw	ra,4(sp)
    9348:	df000017 	ldw	fp,0(sp)
    934c:	dec00204 	addi	sp,sp,8
    9350:	f800283a 	ret

00009354 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9354:	defffe04 	addi	sp,sp,-8
    9358:	dfc00115 	stw	ra,4(sp)
    935c:	df000015 	stw	fp,0(sp)
    9360:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    9364:	01000074 	movhi	r4,1
    9368:	21040004 	addi	r4,r4,4096
    936c:	000b883a 	mov	r5,zero
    9370:	000d883a 	mov	r6,zero
    9374:	01c0fa04 	movi	r7,1000
    9378:	00096640 	call	9664 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    937c:	01000074 	movhi	r4,1
    9380:	212bf704 	addi	r4,r4,-20516
    9384:	00092e80 	call	92e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    9388:	0001883a 	nop
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD, character_lcd);
    938c:	01000074 	movhi	r4,1
    9390:	212c0204 	addi	r4,r4,-20472
    9394:	000979c0 	call	979c <alt_up_character_lcd_init>
    9398:	01000074 	movhi	r4,1
    939c:	212c0204 	addi	r4,r4,-20472
    93a0:	00092e80 	call	92e8 <alt_dev_reg>
}
    93a4:	e037883a 	mov	sp,fp
    93a8:	dfc00117 	ldw	ra,4(sp)
    93ac:	df000017 	ldw	fp,0(sp)
    93b0:	dec00204 	addi	sp,sp,8
    93b4:	f800283a 	ret

000093b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    93b8:	defffa04 	addi	sp,sp,-24
    93bc:	dfc00515 	stw	ra,20(sp)
    93c0:	df000415 	stw	fp,16(sp)
    93c4:	df000404 	addi	fp,sp,16
    93c8:	e13ffd15 	stw	r4,-12(fp)
    93cc:	e17ffe15 	stw	r5,-8(fp)
    93d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    93d4:	e0bffd17 	ldw	r2,-12(fp)
    93d8:	10800017 	ldw	r2,0(r2)
    93dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    93e0:	e0bffc17 	ldw	r2,-16(fp)
    93e4:	10c00a04 	addi	r3,r2,40
    93e8:	e0bffd17 	ldw	r2,-12(fp)
    93ec:	10800217 	ldw	r2,8(r2)
    93f0:	1809883a 	mov	r4,r3
    93f4:	e17ffe17 	ldw	r5,-8(fp)
    93f8:	e1bfff17 	ldw	r6,-4(fp)
    93fc:	100f883a 	mov	r7,r2
    9400:	00094780 	call	9478 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9404:	e037883a 	mov	sp,fp
    9408:	dfc00117 	ldw	ra,4(sp)
    940c:	df000017 	ldw	fp,0(sp)
    9410:	dec00204 	addi	sp,sp,8
    9414:	f800283a 	ret

00009418 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9418:	defffa04 	addi	sp,sp,-24
    941c:	dfc00515 	stw	ra,20(sp)
    9420:	df000415 	stw	fp,16(sp)
    9424:	df000404 	addi	fp,sp,16
    9428:	e13ffd15 	stw	r4,-12(fp)
    942c:	e17ffe15 	stw	r5,-8(fp)
    9430:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9434:	e0bffd17 	ldw	r2,-12(fp)
    9438:	10800017 	ldw	r2,0(r2)
    943c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9440:	e0bffc17 	ldw	r2,-16(fp)
    9444:	10c00a04 	addi	r3,r2,40
    9448:	e0bffd17 	ldw	r2,-12(fp)
    944c:	10800217 	ldw	r2,8(r2)
    9450:	1809883a 	mov	r4,r3
    9454:	e17ffe17 	ldw	r5,-8(fp)
    9458:	e1bfff17 	ldw	r6,-4(fp)
    945c:	100f883a 	mov	r7,r2
    9460:	000955c0 	call	955c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9464:	e037883a 	mov	sp,fp
    9468:	dfc00117 	ldw	ra,4(sp)
    946c:	df000017 	ldw	fp,0(sp)
    9470:	dec00204 	addi	sp,sp,8
    9474:	f800283a 	ret

00009478 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9478:	defff704 	addi	sp,sp,-36
    947c:	df000815 	stw	fp,32(sp)
    9480:	df000804 	addi	fp,sp,32
    9484:	e13ffc15 	stw	r4,-16(fp)
    9488:	e17ffd15 	stw	r5,-12(fp)
    948c:	e1bffe15 	stw	r6,-8(fp)
    9490:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9494:	e0bffc17 	ldw	r2,-16(fp)
    9498:	10800017 	ldw	r2,0(r2)
    949c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    94a0:	e0bffd17 	ldw	r2,-12(fp)
    94a4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    94a8:	e0bffe17 	ldw	r2,-8(fp)
    94ac:	e0fffd17 	ldw	r3,-12(fp)
    94b0:	1885883a 	add	r2,r3,r2
    94b4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    94b8:	00001406 	br	950c <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    94bc:	e0bff917 	ldw	r2,-28(fp)
    94c0:	10800037 	ldwio	r2,0(r2)
    94c4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    94c8:	e0bffb17 	ldw	r2,-20(fp)
    94cc:	10a0000c 	andi	r2,r2,32768
    94d0:	10000626 	beq	r2,zero,94ec <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    94d4:	e0bff817 	ldw	r2,-32(fp)
    94d8:	10c00044 	addi	r3,r2,1
    94dc:	e0fff815 	stw	r3,-32(fp)
    94e0:	e0fffb17 	ldw	r3,-20(fp)
    94e4:	10c00005 	stb	r3,0(r2)
    94e8:	00000806 	br	950c <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    94ec:	e0fff817 	ldw	r3,-32(fp)
    94f0:	e0bffd17 	ldw	r2,-12(fp)
    94f4:	18800126 	beq	r3,r2,94fc <altera_avalon_jtag_uart_read+0x84>
      break;
    94f8:	00000706 	br	9518 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
    94fc:	e0bfff17 	ldw	r2,-4(fp)
    9500:	1090000c 	andi	r2,r2,16384
    9504:	10000126 	beq	r2,zero,950c <altera_avalon_jtag_uart_read+0x94>
      break;   
    9508:	00000306 	br	9518 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    950c:	e0fff817 	ldw	r3,-32(fp)
    9510:	e0bffa17 	ldw	r2,-24(fp)
    9514:	18bfe936 	bltu	r3,r2,94bc <_gp+0xffff62e0>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    9518:	e0fff817 	ldw	r3,-32(fp)
    951c:	e0bffd17 	ldw	r2,-12(fp)
    9520:	18800426 	beq	r3,r2,9534 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
    9524:	e0fff817 	ldw	r3,-32(fp)
    9528:	e0bffd17 	ldw	r2,-12(fp)
    952c:	1885c83a 	sub	r2,r3,r2
    9530:	00000606 	br	954c <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
    9534:	e0bfff17 	ldw	r2,-4(fp)
    9538:	1090000c 	andi	r2,r2,16384
    953c:	10000226 	beq	r2,zero,9548 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
    9540:	00bffd44 	movi	r2,-11
    9544:	00000106 	br	954c <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
    9548:	00bffec4 	movi	r2,-5
}
    954c:	e037883a 	mov	sp,fp
    9550:	df000017 	ldw	fp,0(sp)
    9554:	dec00104 	addi	sp,sp,4
    9558:	f800283a 	ret

0000955c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    955c:	defff904 	addi	sp,sp,-28
    9560:	df000615 	stw	fp,24(sp)
    9564:	df000604 	addi	fp,sp,24
    9568:	e13ffc15 	stw	r4,-16(fp)
    956c:	e17ffd15 	stw	r5,-12(fp)
    9570:	e1bffe15 	stw	r6,-8(fp)
    9574:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9578:	e0bffc17 	ldw	r2,-16(fp)
    957c:	10800017 	ldw	r2,0(r2)
    9580:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9584:	e0bffe17 	ldw	r2,-8(fp)
    9588:	e0fffd17 	ldw	r3,-12(fp)
    958c:	1885883a 	add	r2,r3,r2
    9590:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    9594:	00000e06 	br	95d0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9598:	e0bffa17 	ldw	r2,-24(fp)
    959c:	10800104 	addi	r2,r2,4
    95a0:	10800037 	ldwio	r2,0(r2)
    95a4:	10bfffec 	andhi	r2,r2,65535
    95a8:	10000926 	beq	r2,zero,95d0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    95ac:	e0fffa17 	ldw	r3,-24(fp)
    95b0:	e0bffd17 	ldw	r2,-12(fp)
    95b4:	11000044 	addi	r4,r2,1
    95b8:	e13ffd15 	stw	r4,-12(fp)
    95bc:	10800003 	ldbu	r2,0(r2)
    95c0:	10803fcc 	andi	r2,r2,255
    95c4:	1080201c 	xori	r2,r2,128
    95c8:	10bfe004 	addi	r2,r2,-128
    95cc:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    95d0:	e0fffd17 	ldw	r3,-12(fp)
    95d4:	e0bffb17 	ldw	r2,-20(fp)
    95d8:	18bfef36 	bltu	r3,r2,9598 <_gp+0xffff63bc>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    95dc:	e0bffe17 	ldw	r2,-8(fp)
}
    95e0:	e037883a 	mov	sp,fp
    95e4:	df000017 	ldw	fp,0(sp)
    95e8:	dec00104 	addi	sp,sp,4
    95ec:	f800283a 	ret

000095f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    95f0:	defffa04 	addi	sp,sp,-24
    95f4:	dfc00515 	stw	ra,20(sp)
    95f8:	df000415 	stw	fp,16(sp)
    95fc:	df000404 	addi	fp,sp,16
    9600:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9604:	0007883a 	mov	r3,zero
    9608:	e0bfff17 	ldw	r2,-4(fp)
    960c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9610:	e0bfff17 	ldw	r2,-4(fp)
    9614:	10800104 	addi	r2,r2,4
    9618:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    961c:	0005303a 	rdctl	r2,status
    9620:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9624:	e0fffd17 	ldw	r3,-12(fp)
    9628:	00bfff84 	movi	r2,-2
    962c:	1884703a 	and	r2,r3,r2
    9630:	1001703a 	wrctl	status,r2
  
  return context;
    9634:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9638:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    963c:	000a8100 	call	a810 <alt_tick>
    9640:	e0bffc17 	ldw	r2,-16(fp)
    9644:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9648:	e0bffe17 	ldw	r2,-8(fp)
    964c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    9650:	e037883a 	mov	sp,fp
    9654:	dfc00117 	ldw	ra,4(sp)
    9658:	df000017 	ldw	fp,0(sp)
    965c:	dec00204 	addi	sp,sp,8
    9660:	f800283a 	ret

00009664 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9664:	defff804 	addi	sp,sp,-32
    9668:	dfc00715 	stw	ra,28(sp)
    966c:	df000615 	stw	fp,24(sp)
    9670:	df000604 	addi	fp,sp,24
    9674:	e13ffc15 	stw	r4,-16(fp)
    9678:	e17ffd15 	stw	r5,-12(fp)
    967c:	e1bffe15 	stw	r6,-8(fp)
    9680:	e1ffff15 	stw	r7,-4(fp)
    9684:	e0bfff17 	ldw	r2,-4(fp)
    9688:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    968c:	00800074 	movhi	r2,1
    9690:	10ad4c04 	addi	r2,r2,-19152
    9694:	10800017 	ldw	r2,0(r2)
    9698:	1000041e 	bne	r2,zero,96ac <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    969c:	00800074 	movhi	r2,1
    96a0:	10ad4c04 	addi	r2,r2,-19152
    96a4:	e0fffb17 	ldw	r3,-20(fp)
    96a8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    96ac:	e0bffc17 	ldw	r2,-16(fp)
    96b0:	10800104 	addi	r2,r2,4
    96b4:	00c001c4 	movi	r3,7
    96b8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    96bc:	d8000015 	stw	zero,0(sp)
    96c0:	e13ffd17 	ldw	r4,-12(fp)
    96c4:	e17ffe17 	ldw	r5,-8(fp)
    96c8:	01800074 	movhi	r6,1
    96cc:	31a57c04 	addi	r6,r6,-27152
    96d0:	e1fffc17 	ldw	r7,-16(fp)
    96d4:	000a02c0 	call	a02c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    96d8:	e037883a 	mov	sp,fp
    96dc:	dfc00117 	ldw	ra,4(sp)
    96e0:	df000017 	ldw	fp,0(sp)
    96e4:	dec00204 	addi	sp,sp,8
    96e8:	f800283a 	ret

000096ec <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    96ec:	defffc04 	addi	sp,sp,-16
    96f0:	df000315 	stw	fp,12(sp)
    96f4:	df000304 	addi	fp,sp,12
    96f8:	e13ffe15 	stw	r4,-8(fp)
    96fc:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    9700:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    9704:	e0bfff17 	ldw	r2,-4(fp)
    9708:	1000061e 	bne	r2,zero,9724 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    970c:	e0bffe17 	ldw	r2,-8(fp)
    9710:	1007883a 	mov	r3,r2
    9714:	e0bffd03 	ldbu	r2,-12(fp)
    9718:	1884b03a 	or	r2,r3,r2
    971c:	e0bffd05 	stb	r2,-12(fp)
    9720:	00000806 	br	9744 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    9724:	e0bffe17 	ldw	r2,-8(fp)
    9728:	1007883a 	mov	r3,r2
    972c:	e0bffd03 	ldbu	r2,-12(fp)
    9730:	1884b03a 	or	r2,r3,r2
    9734:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    9738:	e0bffd03 	ldbu	r2,-12(fp)
    973c:	10801014 	ori	r2,r2,64
    9740:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    9744:	e0fffd03 	ldbu	r3,-12(fp)
    9748:	00bfe004 	movi	r2,-128
    974c:	1884b03a 	or	r2,r3,r2
}
    9750:	e037883a 	mov	sp,fp
    9754:	df000017 	ldw	fp,0(sp)
    9758:	dec00104 	addi	sp,sp,4
    975c:	f800283a 	ret

00009760 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    9760:	defffd04 	addi	sp,sp,-12
    9764:	df000215 	stw	fp,8(sp)
    9768:	df000204 	addi	fp,sp,8
    976c:	e13ffe15 	stw	r4,-8(fp)
    9770:	2805883a 	mov	r2,r5
    9774:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    9778:	e0bffe17 	ldw	r2,-8(fp)
    977c:	10800a17 	ldw	r2,40(r2)
    9780:	1007883a 	mov	r3,r2
    9784:	e0bfff03 	ldbu	r2,-4(fp)
    9788:	18800025 	stbio	r2,0(r3)
}
    978c:	e037883a 	mov	sp,fp
    9790:	df000017 	ldw	fp,0(sp)
    9794:	dec00104 	addi	sp,sp,4
    9798:	f800283a 	ret

0000979c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    979c:	defffe04 	addi	sp,sp,-8
    97a0:	df000115 	stw	fp,4(sp)
    97a4:	df000104 	addi	fp,sp,4
    97a8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    97ac:	e0bfff17 	ldw	r2,-4(fp)
    97b0:	10800a17 	ldw	r2,40(r2)
    97b4:	1007883a 	mov	r3,r2
    97b8:	00800044 	movi	r2,1
    97bc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    97c0:	e037883a 	mov	sp,fp
    97c4:	df000017 	ldw	fp,0(sp)
    97c8:	dec00104 	addi	sp,sp,4
    97cc:	f800283a 	ret

000097d0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    97d0:	defffc04 	addi	sp,sp,-16
    97d4:	dfc00315 	stw	ra,12(sp)
    97d8:	df000215 	stw	fp,8(sp)
    97dc:	df000204 	addi	fp,sp,8
    97e0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    97e4:	e13fff17 	ldw	r4,-4(fp)
    97e8:	01400074 	movhi	r5,1
    97ec:	296c7b04 	addi	r5,r5,-19988
    97f0:	0009f800 	call	9f80 <alt_find_dev>
    97f4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    97f8:	e0bffe17 	ldw	r2,-8(fp)
}
    97fc:	e037883a 	mov	sp,fp
    9800:	dfc00117 	ldw	ra,4(sp)
    9804:	df000017 	ldw	fp,0(sp)
    9808:	dec00204 	addi	sp,sp,8
    980c:	f800283a 	ret

00009810 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    9810:	defffb04 	addi	sp,sp,-20
    9814:	df000415 	stw	fp,16(sp)
    9818:	df000404 	addi	fp,sp,16
    981c:	e13ffd15 	stw	r4,-12(fp)
    9820:	e17ffe15 	stw	r5,-8(fp)
    9824:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    9828:	e03ffc15 	stw	zero,-16(fp)
    982c:	00000f06 	br	986c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    9830:	e0bffd17 	ldw	r2,-12(fp)
    9834:	10800a17 	ldw	r2,40(r2)
    9838:	10800044 	addi	r2,r2,1
    983c:	1009883a 	mov	r4,r2
    9840:	e0fffe17 	ldw	r3,-8(fp)
    9844:	e0bffc17 	ldw	r2,-16(fp)
    9848:	1885883a 	add	r2,r3,r2
    984c:	10800003 	ldbu	r2,0(r2)
    9850:	10803fcc 	andi	r2,r2,255
    9854:	1080201c 	xori	r2,r2,128
    9858:	10bfe004 	addi	r2,r2,-128
    985c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    9860:	e0bffc17 	ldw	r2,-16(fp)
    9864:	10800044 	addi	r2,r2,1
    9868:	e0bffc15 	stw	r2,-16(fp)
    986c:	e0fffc17 	ldw	r3,-16(fp)
    9870:	e0bfff17 	ldw	r2,-4(fp)
    9874:	18bfee36 	bltu	r3,r2,9830 <_gp+0xffff6654>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    9878:	e037883a 	mov	sp,fp
    987c:	df000017 	ldw	fp,0(sp)
    9880:	dec00104 	addi	sp,sp,4
    9884:	f800283a 	ret

00009888 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    9888:	defffd04 	addi	sp,sp,-12
    988c:	df000215 	stw	fp,8(sp)
    9890:	df000204 	addi	fp,sp,8
    9894:	e13ffe15 	stw	r4,-8(fp)
    9898:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    989c:	00000d06 	br	98d4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    98a0:	e0bffe17 	ldw	r2,-8(fp)
    98a4:	10800a17 	ldw	r2,40(r2)
    98a8:	10800044 	addi	r2,r2,1
    98ac:	1007883a 	mov	r3,r2
    98b0:	e0bfff17 	ldw	r2,-4(fp)
    98b4:	10800003 	ldbu	r2,0(r2)
    98b8:	10803fcc 	andi	r2,r2,255
    98bc:	1080201c 	xori	r2,r2,128
    98c0:	10bfe004 	addi	r2,r2,-128
    98c4:	18800025 	stbio	r2,0(r3)
		++ptr;
    98c8:	e0bfff17 	ldw	r2,-4(fp)
    98cc:	10800044 	addi	r2,r2,1
    98d0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    98d4:	e0bfff17 	ldw	r2,-4(fp)
    98d8:	10800003 	ldbu	r2,0(r2)
    98dc:	10803fcc 	andi	r2,r2,255
    98e0:	1080201c 	xori	r2,r2,128
    98e4:	10bfe004 	addi	r2,r2,-128
    98e8:	103fed1e 	bne	r2,zero,98a0 <_gp+0xffff66c4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    98ec:	e037883a 	mov	sp,fp
    98f0:	df000017 	ldw	fp,0(sp)
    98f4:	dec00104 	addi	sp,sp,4
    98f8:	f800283a 	ret

000098fc <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    98fc:	defffb04 	addi	sp,sp,-20
    9900:	dfc00415 	stw	ra,16(sp)
    9904:	df000315 	stw	fp,12(sp)
    9908:	df000304 	addi	fp,sp,12
    990c:	e13ffd15 	stw	r4,-12(fp)
    9910:	e17ffe15 	stw	r5,-8(fp)
    9914:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    9918:	e0bffd17 	ldw	r2,-12(fp)
    991c:	10c00017 	ldw	r3,0(r2)
    9920:	e0bfff17 	ldw	r2,-4(fp)
    9924:	1809883a 	mov	r4,r3
    9928:	e17ffe17 	ldw	r5,-8(fp)
    992c:	100d883a 	mov	r6,r2
    9930:	00098100 	call	9810 <alt_up_character_lcd_write>
	return 0;
    9934:	0005883a 	mov	r2,zero
}
    9938:	e037883a 	mov	sp,fp
    993c:	dfc00117 	ldw	ra,4(sp)
    9940:	df000017 	ldw	fp,0(sp)
    9944:	dec00204 	addi	sp,sp,8
    9948:	f800283a 	ret

0000994c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    994c:	defffa04 	addi	sp,sp,-24
    9950:	dfc00515 	stw	ra,20(sp)
    9954:	df000415 	stw	fp,16(sp)
    9958:	df000404 	addi	fp,sp,16
    995c:	e13ffd15 	stw	r4,-12(fp)
    9960:	e17ffe15 	stw	r5,-8(fp)
    9964:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    9968:	e0bffe17 	ldw	r2,-8(fp)
    996c:	10800a28 	cmpgeui	r2,r2,40
    9970:	1000031e 	bne	r2,zero,9980 <alt_up_character_lcd_set_cursor_pos+0x34>
    9974:	e0bfff17 	ldw	r2,-4(fp)
    9978:	108000b0 	cmpltui	r2,r2,2
    997c:	1000021e 	bne	r2,zero,9988 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    9980:	00bfffc4 	movi	r2,-1
    9984:	00000906 	br	99ac <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    9988:	e13ffe17 	ldw	r4,-8(fp)
    998c:	e17fff17 	ldw	r5,-4(fp)
    9990:	00096ec0 	call	96ec <get_DDRAM_addr>
    9994:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    9998:	e0bffc03 	ldbu	r2,-16(fp)
    999c:	e13ffd17 	ldw	r4,-12(fp)
    99a0:	100b883a 	mov	r5,r2
    99a4:	00097600 	call	9760 <alt_up_character_lcd_send_cmd>
	return 0;
    99a8:	0005883a 	mov	r2,zero
}
    99ac:	e037883a 	mov	sp,fp
    99b0:	dfc00117 	ldw	ra,4(sp)
    99b4:	df000017 	ldw	fp,0(sp)
    99b8:	dec00204 	addi	sp,sp,8
    99bc:	f800283a 	ret

000099c0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    99c0:	defffb04 	addi	sp,sp,-20
    99c4:	dfc00415 	stw	ra,16(sp)
    99c8:	df000315 	stw	fp,12(sp)
    99cc:	df000304 	addi	fp,sp,12
    99d0:	e13ffe15 	stw	r4,-8(fp)
    99d4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    99d8:	e0bfff17 	ldw	r2,-4(fp)
    99dc:	1000011e 	bne	r2,zero,99e4 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
    99e0:	00001406 	br	9a34 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    99e4:	e0bfff17 	ldw	r2,-4(fp)
    99e8:	0080020e 	bge	zero,r2,99f4 <alt_up_character_lcd_shift_cursor+0x34>
    99ec:	00800504 	movi	r2,20
    99f0:	00000106 	br	99f8 <alt_up_character_lcd_shift_cursor+0x38>
    99f4:	00800404 	movi	r2,16
    99f8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    99fc:	e0bfff17 	ldw	r2,-4(fp)
    9a00:	1000010e 	bge	r2,zero,9a08 <alt_up_character_lcd_shift_cursor+0x48>
    9a04:	0085c83a 	sub	r2,zero,r2
    9a08:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    9a0c:	00000406 	br	9a20 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    9a10:	e0bffd43 	ldbu	r2,-11(fp)
    9a14:	e13ffe17 	ldw	r4,-8(fp)
    9a18:	100b883a 	mov	r5,r2
    9a1c:	00097600 	call	9760 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    9a20:	e0bffd03 	ldbu	r2,-12(fp)
    9a24:	10ffffc4 	addi	r3,r2,-1
    9a28:	e0fffd05 	stb	r3,-12(fp)
    9a2c:	10803fcc 	andi	r2,r2,255
    9a30:	103ff71e 	bne	r2,zero,9a10 <_gp+0xffff6834>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    9a34:	e037883a 	mov	sp,fp
    9a38:	dfc00117 	ldw	ra,4(sp)
    9a3c:	df000017 	ldw	fp,0(sp)
    9a40:	dec00204 	addi	sp,sp,8
    9a44:	f800283a 	ret

00009a48 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    9a48:	defffb04 	addi	sp,sp,-20
    9a4c:	dfc00415 	stw	ra,16(sp)
    9a50:	df000315 	stw	fp,12(sp)
    9a54:	df000304 	addi	fp,sp,12
    9a58:	e13ffe15 	stw	r4,-8(fp)
    9a5c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    9a60:	e0bfff17 	ldw	r2,-4(fp)
    9a64:	1000011e 	bne	r2,zero,9a6c <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
    9a68:	00001406 	br	9abc <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    9a6c:	e0bfff17 	ldw	r2,-4(fp)
    9a70:	0080020e 	bge	zero,r2,9a7c <alt_up_character_lcd_shift_display+0x34>
    9a74:	00800704 	movi	r2,28
    9a78:	00000106 	br	9a80 <alt_up_character_lcd_shift_display+0x38>
    9a7c:	00800604 	movi	r2,24
    9a80:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    9a84:	e0bfff17 	ldw	r2,-4(fp)
    9a88:	1000010e 	bge	r2,zero,9a90 <alt_up_character_lcd_shift_display+0x48>
    9a8c:	0085c83a 	sub	r2,zero,r2
    9a90:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    9a94:	00000406 	br	9aa8 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    9a98:	e0bffd43 	ldbu	r2,-11(fp)
    9a9c:	e13ffe17 	ldw	r4,-8(fp)
    9aa0:	100b883a 	mov	r5,r2
    9aa4:	00097600 	call	9760 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    9aa8:	e0bffd03 	ldbu	r2,-12(fp)
    9aac:	10ffffc4 	addi	r3,r2,-1
    9ab0:	e0fffd05 	stb	r3,-12(fp)
    9ab4:	10803fcc 	andi	r2,r2,255
    9ab8:	103ff71e 	bne	r2,zero,9a98 <_gp+0xffff68bc>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    9abc:	e037883a 	mov	sp,fp
    9ac0:	dfc00117 	ldw	ra,4(sp)
    9ac4:	df000017 	ldw	fp,0(sp)
    9ac8:	dec00204 	addi	sp,sp,8
    9acc:	f800283a 	ret

00009ad0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    9ad0:	defffa04 	addi	sp,sp,-24
    9ad4:	dfc00515 	stw	ra,20(sp)
    9ad8:	df000415 	stw	fp,16(sp)
    9adc:	df000404 	addi	fp,sp,16
    9ae0:	e13ffd15 	stw	r4,-12(fp)
    9ae4:	e17ffe15 	stw	r5,-8(fp)
    9ae8:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    9aec:	e0bffe17 	ldw	r2,-8(fp)
    9af0:	10800a28 	cmpgeui	r2,r2,40
    9af4:	1000031e 	bne	r2,zero,9b04 <alt_up_character_lcd_erase_pos+0x34>
    9af8:	e0bfff17 	ldw	r2,-4(fp)
    9afc:	108000b0 	cmpltui	r2,r2,2
    9b00:	1000021e 	bne	r2,zero,9b0c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    9b04:	00bfffc4 	movi	r2,-1
    9b08:	00000f06 	br	9b48 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    9b0c:	e13ffe17 	ldw	r4,-8(fp)
    9b10:	e17fff17 	ldw	r5,-4(fp)
    9b14:	00096ec0 	call	96ec <get_DDRAM_addr>
    9b18:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    9b1c:	e0bffc03 	ldbu	r2,-16(fp)
    9b20:	e13ffd17 	ldw	r4,-12(fp)
    9b24:	100b883a 	mov	r5,r2
    9b28:	00097600 	call	9760 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    9b2c:	e0bffd17 	ldw	r2,-12(fp)
    9b30:	10800a17 	ldw	r2,40(r2)
    9b34:	10800044 	addi	r2,r2,1
    9b38:	1007883a 	mov	r3,r2
    9b3c:	00800084 	movi	r2,2
    9b40:	18800025 	stbio	r2,0(r3)
	return 0;
    9b44:	0005883a 	mov	r2,zero
}
    9b48:	e037883a 	mov	sp,fp
    9b4c:	dfc00117 	ldw	ra,4(sp)
    9b50:	df000017 	ldw	fp,0(sp)
    9b54:	dec00204 	addi	sp,sp,8
    9b58:	f800283a 	ret

00009b5c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    9b5c:	defffd04 	addi	sp,sp,-12
    9b60:	dfc00215 	stw	ra,8(sp)
    9b64:	df000115 	stw	fp,4(sp)
    9b68:	df000104 	addi	fp,sp,4
    9b6c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    9b70:	e13fff17 	ldw	r4,-4(fp)
    9b74:	01400304 	movi	r5,12
    9b78:	00097600 	call	9760 <alt_up_character_lcd_send_cmd>
}
    9b7c:	e037883a 	mov	sp,fp
    9b80:	dfc00117 	ldw	ra,4(sp)
    9b84:	df000017 	ldw	fp,0(sp)
    9b88:	dec00204 	addi	sp,sp,8
    9b8c:	f800283a 	ret

00009b90 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    9b90:	defffd04 	addi	sp,sp,-12
    9b94:	dfc00215 	stw	ra,8(sp)
    9b98:	df000115 	stw	fp,4(sp)
    9b9c:	df000104 	addi	fp,sp,4
    9ba0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    9ba4:	e13fff17 	ldw	r4,-4(fp)
    9ba8:	014003c4 	movi	r5,15
    9bac:	00097600 	call	9760 <alt_up_character_lcd_send_cmd>
}
    9bb0:	e037883a 	mov	sp,fp
    9bb4:	dfc00117 	ldw	ra,4(sp)
    9bb8:	df000017 	ldw	fp,0(sp)
    9bbc:	dec00204 	addi	sp,sp,8
    9bc0:	f800283a 	ret

00009bc4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9bc4:	defffa04 	addi	sp,sp,-24
    9bc8:	dfc00515 	stw	ra,20(sp)
    9bcc:	df000415 	stw	fp,16(sp)
    9bd0:	df000404 	addi	fp,sp,16
    9bd4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    9bd8:	00800244 	movi	r2,9
    9bdc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    9be0:	e13ffd17 	ldw	r4,-12(fp)
    9be4:	014003f4 	movhi	r5,15
    9be8:	29509004 	addi	r5,r5,16960
    9bec:	0008ff40 	call	8ff4 <__mulsi3>
    9bf0:	0100bef4 	movhi	r4,763
    9bf4:	213c2004 	addi	r4,r4,-3968
    9bf8:	100b883a 	mov	r5,r2
    9bfc:	00086e00 	call	86e0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9c00:	01200034 	movhi	r4,32768
    9c04:	213fffc4 	addi	r4,r4,-1
    9c08:	100b883a 	mov	r5,r2
    9c0c:	00086e00 	call	86e0 <__udivsi3>
    9c10:	e13fff17 	ldw	r4,-4(fp)
    9c14:	100b883a 	mov	r5,r2
    9c18:	00086e00 	call	86e0 <__udivsi3>
    9c1c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    9c20:	e0bffe17 	ldw	r2,-8(fp)
    9c24:	10002a26 	beq	r2,zero,9cd0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    9c28:	e03ffc15 	stw	zero,-16(fp)
    9c2c:	00001706 	br	9c8c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9c30:	00a00034 	movhi	r2,32768
    9c34:	10bfffc4 	addi	r2,r2,-1
    9c38:	10bfffc4 	addi	r2,r2,-1
    9c3c:	103ffe1e 	bne	r2,zero,9c38 <_gp+0xffff6a5c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    9c40:	e13ffd17 	ldw	r4,-12(fp)
    9c44:	014003f4 	movhi	r5,15
    9c48:	29509004 	addi	r5,r5,16960
    9c4c:	0008ff40 	call	8ff4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9c50:	0100bef4 	movhi	r4,763
    9c54:	213c2004 	addi	r4,r4,-3968
    9c58:	100b883a 	mov	r5,r2
    9c5c:	00086e00 	call	86e0 <__udivsi3>
    9c60:	01200034 	movhi	r4,32768
    9c64:	213fffc4 	addi	r4,r4,-1
    9c68:	100b883a 	mov	r5,r2
    9c6c:	00086e00 	call	86e0 <__udivsi3>
    9c70:	1007883a 	mov	r3,r2
    9c74:	e0bfff17 	ldw	r2,-4(fp)
    9c78:	10c5c83a 	sub	r2,r2,r3
    9c7c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9c80:	e0bffc17 	ldw	r2,-16(fp)
    9c84:	10800044 	addi	r2,r2,1
    9c88:	e0bffc15 	stw	r2,-16(fp)
    9c8c:	e0fffc17 	ldw	r3,-16(fp)
    9c90:	e0bffe17 	ldw	r2,-8(fp)
    9c94:	18bfe616 	blt	r3,r2,9c30 <_gp+0xffff6a54>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9c98:	e13ffd17 	ldw	r4,-12(fp)
    9c9c:	014003f4 	movhi	r5,15
    9ca0:	29509004 	addi	r5,r5,16960
    9ca4:	0008ff40 	call	8ff4 <__mulsi3>
    9ca8:	0100bef4 	movhi	r4,763
    9cac:	213c2004 	addi	r4,r4,-3968
    9cb0:	100b883a 	mov	r5,r2
    9cb4:	00086e00 	call	86e0 <__udivsi3>
    9cb8:	1009883a 	mov	r4,r2
    9cbc:	e17fff17 	ldw	r5,-4(fp)
    9cc0:	0008ff40 	call	8ff4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9cc4:	10bfffc4 	addi	r2,r2,-1
    9cc8:	103ffe1e 	bne	r2,zero,9cc4 <_gp+0xffff6ae8>
    9ccc:	00000d06 	br	9d04 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9cd0:	e13ffd17 	ldw	r4,-12(fp)
    9cd4:	014003f4 	movhi	r5,15
    9cd8:	29509004 	addi	r5,r5,16960
    9cdc:	0008ff40 	call	8ff4 <__mulsi3>
    9ce0:	0100bef4 	movhi	r4,763
    9ce4:	213c2004 	addi	r4,r4,-3968
    9ce8:	100b883a 	mov	r5,r2
    9cec:	00086e00 	call	86e0 <__udivsi3>
    9cf0:	1009883a 	mov	r4,r2
    9cf4:	e17fff17 	ldw	r5,-4(fp)
    9cf8:	0008ff40 	call	8ff4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9cfc:	10bfffc4 	addi	r2,r2,-1
    9d00:	00bffe16 	blt	zero,r2,9cfc <_gp+0xffff6b20>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    9d04:	0005883a 	mov	r2,zero
}
    9d08:	e037883a 	mov	sp,fp
    9d0c:	dfc00117 	ldw	ra,4(sp)
    9d10:	df000017 	ldw	fp,0(sp)
    9d14:	dec00204 	addi	sp,sp,8
    9d18:	f800283a 	ret

00009d1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9d1c:	defffe04 	addi	sp,sp,-8
    9d20:	dfc00115 	stw	ra,4(sp)
    9d24:	df000015 	stw	fp,0(sp)
    9d28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9d2c:	00800074 	movhi	r2,1
    9d30:	10ac7e04 	addi	r2,r2,-19976
    9d34:	10800017 	ldw	r2,0(r2)
    9d38:	10000526 	beq	r2,zero,9d50 <alt_get_errno+0x34>
    9d3c:	00800074 	movhi	r2,1
    9d40:	10ac7e04 	addi	r2,r2,-19976
    9d44:	10800017 	ldw	r2,0(r2)
    9d48:	103ee83a 	callr	r2
    9d4c:	00000206 	br	9d58 <alt_get_errno+0x3c>
    9d50:	00800074 	movhi	r2,1
    9d54:	10ad4704 	addi	r2,r2,-19172
}
    9d58:	e037883a 	mov	sp,fp
    9d5c:	dfc00117 	ldw	ra,4(sp)
    9d60:	df000017 	ldw	fp,0(sp)
    9d64:	dec00204 	addi	sp,sp,8
    9d68:	f800283a 	ret

00009d6c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9d6c:	defffb04 	addi	sp,sp,-20
    9d70:	dfc00415 	stw	ra,16(sp)
    9d74:	df000315 	stw	fp,12(sp)
    9d78:	df000304 	addi	fp,sp,12
    9d7c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9d80:	e0bfff17 	ldw	r2,-4(fp)
    9d84:	10000816 	blt	r2,zero,9da8 <close+0x3c>
    9d88:	e13fff17 	ldw	r4,-4(fp)
    9d8c:	01400304 	movi	r5,12
    9d90:	0008ff40 	call	8ff4 <__mulsi3>
    9d94:	1007883a 	mov	r3,r2
    9d98:	00800074 	movhi	r2,1
    9d9c:	10ac1704 	addi	r2,r2,-20388
    9da0:	1885883a 	add	r2,r3,r2
    9da4:	00000106 	br	9dac <close+0x40>
    9da8:	0005883a 	mov	r2,zero
    9dac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9db0:	e0bffd17 	ldw	r2,-12(fp)
    9db4:	10001926 	beq	r2,zero,9e1c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9db8:	e0bffd17 	ldw	r2,-12(fp)
    9dbc:	10800017 	ldw	r2,0(r2)
    9dc0:	10800417 	ldw	r2,16(r2)
    9dc4:	10000626 	beq	r2,zero,9de0 <close+0x74>
    9dc8:	e0bffd17 	ldw	r2,-12(fp)
    9dcc:	10800017 	ldw	r2,0(r2)
    9dd0:	10800417 	ldw	r2,16(r2)
    9dd4:	e13ffd17 	ldw	r4,-12(fp)
    9dd8:	103ee83a 	callr	r2
    9ddc:	00000106 	br	9de4 <close+0x78>
    9de0:	0005883a 	mov	r2,zero
    9de4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9de8:	e13fff17 	ldw	r4,-4(fp)
    9dec:	000a6f80 	call	a6f8 <alt_release_fd>
    if (rval < 0)
    9df0:	e0bffe17 	ldw	r2,-8(fp)
    9df4:	1000070e 	bge	r2,zero,9e14 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    9df8:	0009d1c0 	call	9d1c <alt_get_errno>
    9dfc:	1007883a 	mov	r3,r2
    9e00:	e0bffe17 	ldw	r2,-8(fp)
    9e04:	0085c83a 	sub	r2,zero,r2
    9e08:	18800015 	stw	r2,0(r3)
      return -1;
    9e0c:	00bfffc4 	movi	r2,-1
    9e10:	00000706 	br	9e30 <close+0xc4>
    }
    return 0;
    9e14:	0005883a 	mov	r2,zero
    9e18:	00000506 	br	9e30 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9e1c:	0009d1c0 	call	9d1c <alt_get_errno>
    9e20:	1007883a 	mov	r3,r2
    9e24:	00801444 	movi	r2,81
    9e28:	18800015 	stw	r2,0(r3)
    return -1;
    9e2c:	00bfffc4 	movi	r2,-1
  }
}
    9e30:	e037883a 	mov	sp,fp
    9e34:	dfc00117 	ldw	ra,4(sp)
    9e38:	df000017 	ldw	fp,0(sp)
    9e3c:	dec00204 	addi	sp,sp,8
    9e40:	f800283a 	ret

00009e44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9e44:	deffff04 	addi	sp,sp,-4
    9e48:	df000015 	stw	fp,0(sp)
    9e4c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9e50:	e037883a 	mov	sp,fp
    9e54:	df000017 	ldw	fp,0(sp)
    9e58:	dec00104 	addi	sp,sp,4
    9e5c:	f800283a 	ret

00009e60 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9e60:	defffc04 	addi	sp,sp,-16
    9e64:	df000315 	stw	fp,12(sp)
    9e68:	df000304 	addi	fp,sp,12
    9e6c:	e13ffd15 	stw	r4,-12(fp)
    9e70:	e17ffe15 	stw	r5,-8(fp)
    9e74:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9e78:	e0bfff17 	ldw	r2,-4(fp)
}
    9e7c:	e037883a 	mov	sp,fp
    9e80:	df000017 	ldw	fp,0(sp)
    9e84:	dec00104 	addi	sp,sp,4
    9e88:	f800283a 	ret

00009e8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9e8c:	defffe04 	addi	sp,sp,-8
    9e90:	dfc00115 	stw	ra,4(sp)
    9e94:	df000015 	stw	fp,0(sp)
    9e98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9e9c:	00800074 	movhi	r2,1
    9ea0:	10ac7e04 	addi	r2,r2,-19976
    9ea4:	10800017 	ldw	r2,0(r2)
    9ea8:	10000526 	beq	r2,zero,9ec0 <alt_get_errno+0x34>
    9eac:	00800074 	movhi	r2,1
    9eb0:	10ac7e04 	addi	r2,r2,-19976
    9eb4:	10800017 	ldw	r2,0(r2)
    9eb8:	103ee83a 	callr	r2
    9ebc:	00000206 	br	9ec8 <alt_get_errno+0x3c>
    9ec0:	00800074 	movhi	r2,1
    9ec4:	10ad4704 	addi	r2,r2,-19172
}
    9ec8:	e037883a 	mov	sp,fp
    9ecc:	dfc00117 	ldw	ra,4(sp)
    9ed0:	df000017 	ldw	fp,0(sp)
    9ed4:	dec00204 	addi	sp,sp,8
    9ed8:	f800283a 	ret

00009edc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9edc:	defffa04 	addi	sp,sp,-24
    9ee0:	dfc00515 	stw	ra,20(sp)
    9ee4:	df000415 	stw	fp,16(sp)
    9ee8:	df000404 	addi	fp,sp,16
    9eec:	e13ffe15 	stw	r4,-8(fp)
    9ef0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9ef4:	e0bffe17 	ldw	r2,-8(fp)
    9ef8:	10000326 	beq	r2,zero,9f08 <alt_dev_llist_insert+0x2c>
    9efc:	e0bffe17 	ldw	r2,-8(fp)
    9f00:	10800217 	ldw	r2,8(r2)
    9f04:	1000061e 	bne	r2,zero,9f20 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9f08:	0009e8c0 	call	9e8c <alt_get_errno>
    9f0c:	1007883a 	mov	r3,r2
    9f10:	00800584 	movi	r2,22
    9f14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9f18:	00bffa84 	movi	r2,-22
    9f1c:	00001306 	br	9f6c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9f20:	e0bffe17 	ldw	r2,-8(fp)
    9f24:	e0ffff17 	ldw	r3,-4(fp)
    9f28:	e0fffc15 	stw	r3,-16(fp)
    9f2c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9f30:	e0bffd17 	ldw	r2,-12(fp)
    9f34:	e0fffc17 	ldw	r3,-16(fp)
    9f38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9f3c:	e0bffc17 	ldw	r2,-16(fp)
    9f40:	10c00017 	ldw	r3,0(r2)
    9f44:	e0bffd17 	ldw	r2,-12(fp)
    9f48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9f4c:	e0bffc17 	ldw	r2,-16(fp)
    9f50:	10800017 	ldw	r2,0(r2)
    9f54:	e0fffd17 	ldw	r3,-12(fp)
    9f58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9f5c:	e0bffc17 	ldw	r2,-16(fp)
    9f60:	e0fffd17 	ldw	r3,-12(fp)
    9f64:	10c00015 	stw	r3,0(r2)

  return 0;  
    9f68:	0005883a 	mov	r2,zero
}
    9f6c:	e037883a 	mov	sp,fp
    9f70:	dfc00117 	ldw	ra,4(sp)
    9f74:	df000017 	ldw	fp,0(sp)
    9f78:	dec00204 	addi	sp,sp,8
    9f7c:	f800283a 	ret

00009f80 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9f80:	defffa04 	addi	sp,sp,-24
    9f84:	dfc00515 	stw	ra,20(sp)
    9f88:	df000415 	stw	fp,16(sp)
    9f8c:	df000404 	addi	fp,sp,16
    9f90:	e13ffe15 	stw	r4,-8(fp)
    9f94:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9f98:	e0bfff17 	ldw	r2,-4(fp)
    9f9c:	10800017 	ldw	r2,0(r2)
    9fa0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9fa4:	e13ffe17 	ldw	r4,-8(fp)
    9fa8:	000882c0 	call	882c <strlen>
    9fac:	10800044 	addi	r2,r2,1
    9fb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9fb4:	00000d06 	br	9fec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9fb8:	e0bffc17 	ldw	r2,-16(fp)
    9fbc:	10c00217 	ldw	r3,8(r2)
    9fc0:	e0bffd17 	ldw	r2,-12(fp)
    9fc4:	1809883a 	mov	r4,r3
    9fc8:	e17ffe17 	ldw	r5,-8(fp)
    9fcc:	100d883a 	mov	r6,r2
    9fd0:	000abd80 	call	abd8 <memcmp>
    9fd4:	1000021e 	bne	r2,zero,9fe0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9fd8:	e0bffc17 	ldw	r2,-16(fp)
    9fdc:	00000706 	br	9ffc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9fe0:	e0bffc17 	ldw	r2,-16(fp)
    9fe4:	10800017 	ldw	r2,0(r2)
    9fe8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9fec:	e0fffc17 	ldw	r3,-16(fp)
    9ff0:	e0bfff17 	ldw	r2,-4(fp)
    9ff4:	18bff01e 	bne	r3,r2,9fb8 <_gp+0xffff6ddc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9ff8:	0005883a 	mov	r2,zero
}
    9ffc:	e037883a 	mov	sp,fp
    a000:	dfc00117 	ldw	ra,4(sp)
    a004:	df000017 	ldw	fp,0(sp)
    a008:	dec00204 	addi	sp,sp,8
    a00c:	f800283a 	ret

0000a010 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    a010:	deffff04 	addi	sp,sp,-4
    a014:	df000015 	stw	fp,0(sp)
    a018:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    a01c:	e037883a 	mov	sp,fp
    a020:	df000017 	ldw	fp,0(sp)
    a024:	dec00104 	addi	sp,sp,4
    a028:	f800283a 	ret

0000a02c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a02c:	defff904 	addi	sp,sp,-28
    a030:	dfc00615 	stw	ra,24(sp)
    a034:	df000515 	stw	fp,20(sp)
    a038:	df000504 	addi	fp,sp,20
    a03c:	e13ffc15 	stw	r4,-16(fp)
    a040:	e17ffd15 	stw	r5,-12(fp)
    a044:	e1bffe15 	stw	r6,-8(fp)
    a048:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    a04c:	e0800217 	ldw	r2,8(fp)
    a050:	d8800015 	stw	r2,0(sp)
    a054:	e13ffc17 	ldw	r4,-16(fp)
    a058:	e17ffd17 	ldw	r5,-12(fp)
    a05c:	e1bffe17 	ldw	r6,-8(fp)
    a060:	e1ffff17 	ldw	r7,-4(fp)
    a064:	000a20c0 	call	a20c <alt_iic_isr_register>
}  
    a068:	e037883a 	mov	sp,fp
    a06c:	dfc00117 	ldw	ra,4(sp)
    a070:	df000017 	ldw	fp,0(sp)
    a074:	dec00204 	addi	sp,sp,8
    a078:	f800283a 	ret

0000a07c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    a07c:	defff904 	addi	sp,sp,-28
    a080:	df000615 	stw	fp,24(sp)
    a084:	df000604 	addi	fp,sp,24
    a088:	e13ffe15 	stw	r4,-8(fp)
    a08c:	e17fff15 	stw	r5,-4(fp)
    a090:	e0bfff17 	ldw	r2,-4(fp)
    a094:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a098:	0005303a 	rdctl	r2,status
    a09c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a0a0:	e0fffb17 	ldw	r3,-20(fp)
    a0a4:	00bfff84 	movi	r2,-2
    a0a8:	1884703a 	and	r2,r3,r2
    a0ac:	1001703a 	wrctl	status,r2
  
  return context;
    a0b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a0b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    a0b8:	e0bffa17 	ldw	r2,-24(fp)
    a0bc:	00c00044 	movi	r3,1
    a0c0:	1884983a 	sll	r2,r3,r2
    a0c4:	1007883a 	mov	r3,r2
    a0c8:	00800074 	movhi	r2,1
    a0cc:	10ad4b04 	addi	r2,r2,-19156
    a0d0:	10800017 	ldw	r2,0(r2)
    a0d4:	1886b03a 	or	r3,r3,r2
    a0d8:	00800074 	movhi	r2,1
    a0dc:	10ad4b04 	addi	r2,r2,-19156
    a0e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a0e4:	00800074 	movhi	r2,1
    a0e8:	10ad4b04 	addi	r2,r2,-19156
    a0ec:	10800017 	ldw	r2,0(r2)
    a0f0:	100170fa 	wrctl	ienable,r2
    a0f4:	e0bffc17 	ldw	r2,-16(fp)
    a0f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a0fc:	e0bffd17 	ldw	r2,-12(fp)
    a100:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a104:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    a108:	0001883a 	nop
}
    a10c:	e037883a 	mov	sp,fp
    a110:	df000017 	ldw	fp,0(sp)
    a114:	dec00104 	addi	sp,sp,4
    a118:	f800283a 	ret

0000a11c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    a11c:	defff904 	addi	sp,sp,-28
    a120:	df000615 	stw	fp,24(sp)
    a124:	df000604 	addi	fp,sp,24
    a128:	e13ffe15 	stw	r4,-8(fp)
    a12c:	e17fff15 	stw	r5,-4(fp)
    a130:	e0bfff17 	ldw	r2,-4(fp)
    a134:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a138:	0005303a 	rdctl	r2,status
    a13c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a140:	e0fffb17 	ldw	r3,-20(fp)
    a144:	00bfff84 	movi	r2,-2
    a148:	1884703a 	and	r2,r3,r2
    a14c:	1001703a 	wrctl	status,r2
  
  return context;
    a150:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a154:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    a158:	e0bffa17 	ldw	r2,-24(fp)
    a15c:	00c00044 	movi	r3,1
    a160:	1884983a 	sll	r2,r3,r2
    a164:	0084303a 	nor	r2,zero,r2
    a168:	1007883a 	mov	r3,r2
    a16c:	00800074 	movhi	r2,1
    a170:	10ad4b04 	addi	r2,r2,-19156
    a174:	10800017 	ldw	r2,0(r2)
    a178:	1886703a 	and	r3,r3,r2
    a17c:	00800074 	movhi	r2,1
    a180:	10ad4b04 	addi	r2,r2,-19156
    a184:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a188:	00800074 	movhi	r2,1
    a18c:	10ad4b04 	addi	r2,r2,-19156
    a190:	10800017 	ldw	r2,0(r2)
    a194:	100170fa 	wrctl	ienable,r2
    a198:	e0bffc17 	ldw	r2,-16(fp)
    a19c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a1a0:	e0bffd17 	ldw	r2,-12(fp)
    a1a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a1a8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    a1ac:	0001883a 	nop
}
    a1b0:	e037883a 	mov	sp,fp
    a1b4:	df000017 	ldw	fp,0(sp)
    a1b8:	dec00104 	addi	sp,sp,4
    a1bc:	f800283a 	ret

0000a1c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    a1c0:	defffc04 	addi	sp,sp,-16
    a1c4:	df000315 	stw	fp,12(sp)
    a1c8:	df000304 	addi	fp,sp,12
    a1cc:	e13ffe15 	stw	r4,-8(fp)
    a1d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    a1d4:	000530fa 	rdctl	r2,ienable
    a1d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    a1dc:	e0bfff17 	ldw	r2,-4(fp)
    a1e0:	00c00044 	movi	r3,1
    a1e4:	1884983a 	sll	r2,r3,r2
    a1e8:	1007883a 	mov	r3,r2
    a1ec:	e0bffd17 	ldw	r2,-12(fp)
    a1f0:	1884703a 	and	r2,r3,r2
    a1f4:	1004c03a 	cmpne	r2,r2,zero
    a1f8:	10803fcc 	andi	r2,r2,255
}
    a1fc:	e037883a 	mov	sp,fp
    a200:	df000017 	ldw	fp,0(sp)
    a204:	dec00104 	addi	sp,sp,4
    a208:	f800283a 	ret

0000a20c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a20c:	defff504 	addi	sp,sp,-44
    a210:	dfc00a15 	stw	ra,40(sp)
    a214:	df000915 	stw	fp,36(sp)
    a218:	df000904 	addi	fp,sp,36
    a21c:	e13ffc15 	stw	r4,-16(fp)
    a220:	e17ffd15 	stw	r5,-12(fp)
    a224:	e1bffe15 	stw	r6,-8(fp)
    a228:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    a22c:	00bffa84 	movi	r2,-22
    a230:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    a234:	e0bffd17 	ldw	r2,-12(fp)
    a238:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    a23c:	e0bff817 	ldw	r2,-32(fp)
    a240:	10800808 	cmpgei	r2,r2,32
    a244:	1000271e 	bne	r2,zero,a2e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a248:	0005303a 	rdctl	r2,status
    a24c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a250:	e0fffa17 	ldw	r3,-24(fp)
    a254:	00bfff84 	movi	r2,-2
    a258:	1884703a 	and	r2,r3,r2
    a25c:	1001703a 	wrctl	status,r2
  
  return context;
    a260:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    a264:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    a268:	00800074 	movhi	r2,1
    a26c:	10ad4f04 	addi	r2,r2,-19140
    a270:	e0fff817 	ldw	r3,-32(fp)
    a274:	180690fa 	slli	r3,r3,3
    a278:	10c5883a 	add	r2,r2,r3
    a27c:	e0fffe17 	ldw	r3,-8(fp)
    a280:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    a284:	00800074 	movhi	r2,1
    a288:	10ad4f04 	addi	r2,r2,-19140
    a28c:	e0fff817 	ldw	r3,-32(fp)
    a290:	180690fa 	slli	r3,r3,3
    a294:	18c00104 	addi	r3,r3,4
    a298:	10c5883a 	add	r2,r2,r3
    a29c:	e0ffff17 	ldw	r3,-4(fp)
    a2a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a2a4:	e0bffe17 	ldw	r2,-8(fp)
    a2a8:	10000526 	beq	r2,zero,a2c0 <alt_iic_isr_register+0xb4>
    a2ac:	e0bff817 	ldw	r2,-32(fp)
    a2b0:	e13ffc17 	ldw	r4,-16(fp)
    a2b4:	100b883a 	mov	r5,r2
    a2b8:	000a07c0 	call	a07c <alt_ic_irq_enable>
    a2bc:	00000406 	br	a2d0 <alt_iic_isr_register+0xc4>
    a2c0:	e0bff817 	ldw	r2,-32(fp)
    a2c4:	e13ffc17 	ldw	r4,-16(fp)
    a2c8:	100b883a 	mov	r5,r2
    a2cc:	000a11c0 	call	a11c <alt_ic_irq_disable>
    a2d0:	e0bff715 	stw	r2,-36(fp)
    a2d4:	e0bff917 	ldw	r2,-28(fp)
    a2d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a2dc:	e0bffb17 	ldw	r2,-20(fp)
    a2e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    a2e4:	e0bff717 	ldw	r2,-36(fp)
}
    a2e8:	e037883a 	mov	sp,fp
    a2ec:	dfc00117 	ldw	ra,4(sp)
    a2f0:	df000017 	ldw	fp,0(sp)
    a2f4:	dec00204 	addi	sp,sp,8
    a2f8:	f800283a 	ret

0000a2fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a2fc:	defff804 	addi	sp,sp,-32
    a300:	dfc00715 	stw	ra,28(sp)
    a304:	df000615 	stw	fp,24(sp)
    a308:	dc000515 	stw	r16,20(sp)
    a30c:	df000604 	addi	fp,sp,24
    a310:	e13ffb15 	stw	r4,-20(fp)
    a314:	e17ffc15 	stw	r5,-16(fp)
    a318:	e1bffd15 	stw	r6,-12(fp)
    a31c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    a320:	e13ffc17 	ldw	r4,-16(fp)
    a324:	e17ffd17 	ldw	r5,-12(fp)
    a328:	e1bffe17 	ldw	r6,-8(fp)
    a32c:	000a5980 	call	a598 <open>
    a330:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    a334:	e0bffa17 	ldw	r2,-24(fp)
    a338:	10002216 	blt	r2,zero,a3c4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    a33c:	04000074 	movhi	r16,1
    a340:	842c1704 	addi	r16,r16,-20388
    a344:	e0bffa17 	ldw	r2,-24(fp)
    a348:	1009883a 	mov	r4,r2
    a34c:	01400304 	movi	r5,12
    a350:	0008ff40 	call	8ff4 <__mulsi3>
    a354:	8085883a 	add	r2,r16,r2
    a358:	10c00017 	ldw	r3,0(r2)
    a35c:	e0bffb17 	ldw	r2,-20(fp)
    a360:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a364:	04000074 	movhi	r16,1
    a368:	842c1704 	addi	r16,r16,-20388
    a36c:	e0bffa17 	ldw	r2,-24(fp)
    a370:	1009883a 	mov	r4,r2
    a374:	01400304 	movi	r5,12
    a378:	0008ff40 	call	8ff4 <__mulsi3>
    a37c:	10800104 	addi	r2,r2,4
    a380:	8085883a 	add	r2,r16,r2
    a384:	10c00017 	ldw	r3,0(r2)
    a388:	e0bffb17 	ldw	r2,-20(fp)
    a38c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a390:	04000074 	movhi	r16,1
    a394:	842c1704 	addi	r16,r16,-20388
    a398:	e0bffa17 	ldw	r2,-24(fp)
    a39c:	1009883a 	mov	r4,r2
    a3a0:	01400304 	movi	r5,12
    a3a4:	0008ff40 	call	8ff4 <__mulsi3>
    a3a8:	10800204 	addi	r2,r2,8
    a3ac:	8085883a 	add	r2,r16,r2
    a3b0:	10c00017 	ldw	r3,0(r2)
    a3b4:	e0bffb17 	ldw	r2,-20(fp)
    a3b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a3bc:	e13ffa17 	ldw	r4,-24(fp)
    a3c0:	000a6f80 	call	a6f8 <alt_release_fd>
  }
} 
    a3c4:	e6ffff04 	addi	sp,fp,-4
    a3c8:	dfc00217 	ldw	ra,8(sp)
    a3cc:	df000117 	ldw	fp,4(sp)
    a3d0:	dc000017 	ldw	r16,0(sp)
    a3d4:	dec00304 	addi	sp,sp,12
    a3d8:	f800283a 	ret

0000a3dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a3dc:	defffb04 	addi	sp,sp,-20
    a3e0:	dfc00415 	stw	ra,16(sp)
    a3e4:	df000315 	stw	fp,12(sp)
    a3e8:	df000304 	addi	fp,sp,12
    a3ec:	e13ffd15 	stw	r4,-12(fp)
    a3f0:	e17ffe15 	stw	r5,-8(fp)
    a3f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a3f8:	01000074 	movhi	r4,1
    a3fc:	212c1a04 	addi	r4,r4,-20376
    a400:	e17ffd17 	ldw	r5,-12(fp)
    a404:	01800044 	movi	r6,1
    a408:	01c07fc4 	movi	r7,511
    a40c:	000a2fc0 	call	a2fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a410:	01000074 	movhi	r4,1
    a414:	212c1704 	addi	r4,r4,-20388
    a418:	e17ffe17 	ldw	r5,-8(fp)
    a41c:	000d883a 	mov	r6,zero
    a420:	01c07fc4 	movi	r7,511
    a424:	000a2fc0 	call	a2fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a428:	01000074 	movhi	r4,1
    a42c:	212c1d04 	addi	r4,r4,-20364
    a430:	e17fff17 	ldw	r5,-4(fp)
    a434:	01800044 	movi	r6,1
    a438:	01c07fc4 	movi	r7,511
    a43c:	000a2fc0 	call	a2fc <alt_open_fd>
}  
    a440:	e037883a 	mov	sp,fp
    a444:	dfc00117 	ldw	ra,4(sp)
    a448:	df000017 	ldw	fp,0(sp)
    a44c:	dec00204 	addi	sp,sp,8
    a450:	f800283a 	ret

0000a454 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a454:	defffe04 	addi	sp,sp,-8
    a458:	dfc00115 	stw	ra,4(sp)
    a45c:	df000015 	stw	fp,0(sp)
    a460:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a464:	00800074 	movhi	r2,1
    a468:	10ac7e04 	addi	r2,r2,-19976
    a46c:	10800017 	ldw	r2,0(r2)
    a470:	10000526 	beq	r2,zero,a488 <alt_get_errno+0x34>
    a474:	00800074 	movhi	r2,1
    a478:	10ac7e04 	addi	r2,r2,-19976
    a47c:	10800017 	ldw	r2,0(r2)
    a480:	103ee83a 	callr	r2
    a484:	00000206 	br	a490 <alt_get_errno+0x3c>
    a488:	00800074 	movhi	r2,1
    a48c:	10ad4704 	addi	r2,r2,-19172
}
    a490:	e037883a 	mov	sp,fp
    a494:	dfc00117 	ldw	ra,4(sp)
    a498:	df000017 	ldw	fp,0(sp)
    a49c:	dec00204 	addi	sp,sp,8
    a4a0:	f800283a 	ret

0000a4a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a4a4:	defffb04 	addi	sp,sp,-20
    a4a8:	dfc00415 	stw	ra,16(sp)
    a4ac:	df000315 	stw	fp,12(sp)
    a4b0:	dc000215 	stw	r16,8(sp)
    a4b4:	df000304 	addi	fp,sp,12
    a4b8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a4bc:	e0bffe17 	ldw	r2,-8(fp)
    a4c0:	10800217 	ldw	r2,8(r2)
    a4c4:	10d00034 	orhi	r3,r2,16384
    a4c8:	e0bffe17 	ldw	r2,-8(fp)
    a4cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a4d0:	e03ffd15 	stw	zero,-12(fp)
    a4d4:	00002306 	br	a564 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a4d8:	04000074 	movhi	r16,1
    a4dc:	842c1704 	addi	r16,r16,-20388
    a4e0:	e0bffd17 	ldw	r2,-12(fp)
    a4e4:	1009883a 	mov	r4,r2
    a4e8:	01400304 	movi	r5,12
    a4ec:	0008ff40 	call	8ff4 <__mulsi3>
    a4f0:	8085883a 	add	r2,r16,r2
    a4f4:	10c00017 	ldw	r3,0(r2)
    a4f8:	e0bffe17 	ldw	r2,-8(fp)
    a4fc:	10800017 	ldw	r2,0(r2)
    a500:	1880151e 	bne	r3,r2,a558 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a504:	04000074 	movhi	r16,1
    a508:	842c1704 	addi	r16,r16,-20388
    a50c:	e0bffd17 	ldw	r2,-12(fp)
    a510:	1009883a 	mov	r4,r2
    a514:	01400304 	movi	r5,12
    a518:	0008ff40 	call	8ff4 <__mulsi3>
    a51c:	10800204 	addi	r2,r2,8
    a520:	8085883a 	add	r2,r16,r2
    a524:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a528:	10000b0e 	bge	r2,zero,a558 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    a52c:	e13ffd17 	ldw	r4,-12(fp)
    a530:	01400304 	movi	r5,12
    a534:	0008ff40 	call	8ff4 <__mulsi3>
    a538:	1007883a 	mov	r3,r2
    a53c:	00800074 	movhi	r2,1
    a540:	10ac1704 	addi	r2,r2,-20388
    a544:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a548:	e0bffe17 	ldw	r2,-8(fp)
    a54c:	18800226 	beq	r3,r2,a558 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a550:	00bffcc4 	movi	r2,-13
    a554:	00000a06 	br	a580 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a558:	e0bffd17 	ldw	r2,-12(fp)
    a55c:	10800044 	addi	r2,r2,1
    a560:	e0bffd15 	stw	r2,-12(fp)
    a564:	00800074 	movhi	r2,1
    a568:	10ac7d04 	addi	r2,r2,-19980
    a56c:	10800017 	ldw	r2,0(r2)
    a570:	1007883a 	mov	r3,r2
    a574:	e0bffd17 	ldw	r2,-12(fp)
    a578:	18bfd72e 	bgeu	r3,r2,a4d8 <_gp+0xffff72fc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a57c:	0005883a 	mov	r2,zero
}
    a580:	e6ffff04 	addi	sp,fp,-4
    a584:	dfc00217 	ldw	ra,8(sp)
    a588:	df000117 	ldw	fp,4(sp)
    a58c:	dc000017 	ldw	r16,0(sp)
    a590:	dec00304 	addi	sp,sp,12
    a594:	f800283a 	ret

0000a598 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a598:	defff604 	addi	sp,sp,-40
    a59c:	dfc00915 	stw	ra,36(sp)
    a5a0:	df000815 	stw	fp,32(sp)
    a5a4:	df000804 	addi	fp,sp,32
    a5a8:	e13ffd15 	stw	r4,-12(fp)
    a5ac:	e17ffe15 	stw	r5,-8(fp)
    a5b0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a5b4:	00bfffc4 	movi	r2,-1
    a5b8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a5bc:	00bffb44 	movi	r2,-19
    a5c0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a5c4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a5c8:	e13ffd17 	ldw	r4,-12(fp)
    a5cc:	01400074 	movhi	r5,1
    a5d0:	296c7b04 	addi	r5,r5,-19988
    a5d4:	0009f800 	call	9f80 <alt_find_dev>
    a5d8:	e0bff815 	stw	r2,-32(fp)
    a5dc:	e0bff817 	ldw	r2,-32(fp)
    a5e0:	1000051e 	bne	r2,zero,a5f8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a5e4:	e13ffd17 	ldw	r4,-12(fp)
    a5e8:	000a9340 	call	a934 <alt_find_file>
    a5ec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a5f0:	00800044 	movi	r2,1
    a5f4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a5f8:	e0bff817 	ldw	r2,-32(fp)
    a5fc:	10002b26 	beq	r2,zero,a6ac <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a600:	e13ff817 	ldw	r4,-32(fp)
    a604:	000aa480 	call	aa48 <alt_get_fd>
    a608:	e0bff915 	stw	r2,-28(fp)
    a60c:	e0bff917 	ldw	r2,-28(fp)
    a610:	1000030e 	bge	r2,zero,a620 <open+0x88>
    {
      status = index;
    a614:	e0bff917 	ldw	r2,-28(fp)
    a618:	e0bffa15 	stw	r2,-24(fp)
    a61c:	00002506 	br	a6b4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    a620:	e13ff917 	ldw	r4,-28(fp)
    a624:	01400304 	movi	r5,12
    a628:	0008ff40 	call	8ff4 <__mulsi3>
    a62c:	1007883a 	mov	r3,r2
    a630:	00800074 	movhi	r2,1
    a634:	10ac1704 	addi	r2,r2,-20388
    a638:	1885883a 	add	r2,r3,r2
    a63c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a640:	e0fffe17 	ldw	r3,-8(fp)
    a644:	00900034 	movhi	r2,16384
    a648:	10bfffc4 	addi	r2,r2,-1
    a64c:	1886703a 	and	r3,r3,r2
    a650:	e0bffc17 	ldw	r2,-16(fp)
    a654:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a658:	e0bffb17 	ldw	r2,-20(fp)
    a65c:	1000051e 	bne	r2,zero,a674 <open+0xdc>
    a660:	e13ffc17 	ldw	r4,-16(fp)
    a664:	000a4a40 	call	a4a4 <alt_file_locked>
    a668:	e0bffa15 	stw	r2,-24(fp)
    a66c:	e0bffa17 	ldw	r2,-24(fp)
    a670:	10001016 	blt	r2,zero,a6b4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a674:	e0bff817 	ldw	r2,-32(fp)
    a678:	10800317 	ldw	r2,12(r2)
    a67c:	10000826 	beq	r2,zero,a6a0 <open+0x108>
    a680:	e0bff817 	ldw	r2,-32(fp)
    a684:	10800317 	ldw	r2,12(r2)
    a688:	e13ffc17 	ldw	r4,-16(fp)
    a68c:	e17ffd17 	ldw	r5,-12(fp)
    a690:	e1bffe17 	ldw	r6,-8(fp)
    a694:	e1ffff17 	ldw	r7,-4(fp)
    a698:	103ee83a 	callr	r2
    a69c:	00000106 	br	a6a4 <open+0x10c>
    a6a0:	0005883a 	mov	r2,zero
    a6a4:	e0bffa15 	stw	r2,-24(fp)
    a6a8:	00000206 	br	a6b4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a6ac:	00bffb44 	movi	r2,-19
    a6b0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a6b4:	e0bffa17 	ldw	r2,-24(fp)
    a6b8:	1000090e 	bge	r2,zero,a6e0 <open+0x148>
  {
    alt_release_fd (index);  
    a6bc:	e13ff917 	ldw	r4,-28(fp)
    a6c0:	000a6f80 	call	a6f8 <alt_release_fd>
    ALT_ERRNO = -status;
    a6c4:	000a4540 	call	a454 <alt_get_errno>
    a6c8:	1007883a 	mov	r3,r2
    a6cc:	e0bffa17 	ldw	r2,-24(fp)
    a6d0:	0085c83a 	sub	r2,zero,r2
    a6d4:	18800015 	stw	r2,0(r3)
    return -1;
    a6d8:	00bfffc4 	movi	r2,-1
    a6dc:	00000106 	br	a6e4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    a6e0:	e0bff917 	ldw	r2,-28(fp)
}
    a6e4:	e037883a 	mov	sp,fp
    a6e8:	dfc00117 	ldw	ra,4(sp)
    a6ec:	df000017 	ldw	fp,0(sp)
    a6f0:	dec00204 	addi	sp,sp,8
    a6f4:	f800283a 	ret

0000a6f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a6f8:	defffc04 	addi	sp,sp,-16
    a6fc:	dfc00315 	stw	ra,12(sp)
    a700:	df000215 	stw	fp,8(sp)
    a704:	dc000115 	stw	r16,4(sp)
    a708:	df000204 	addi	fp,sp,8
    a70c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    a710:	e0bffe17 	ldw	r2,-8(fp)
    a714:	108000d0 	cmplti	r2,r2,3
    a718:	1000111e 	bne	r2,zero,a760 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    a71c:	04000074 	movhi	r16,1
    a720:	842c1704 	addi	r16,r16,-20388
    a724:	e0bffe17 	ldw	r2,-8(fp)
    a728:	1009883a 	mov	r4,r2
    a72c:	01400304 	movi	r5,12
    a730:	0008ff40 	call	8ff4 <__mulsi3>
    a734:	10800204 	addi	r2,r2,8
    a738:	8085883a 	add	r2,r16,r2
    a73c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a740:	04000074 	movhi	r16,1
    a744:	842c1704 	addi	r16,r16,-20388
    a748:	e0bffe17 	ldw	r2,-8(fp)
    a74c:	1009883a 	mov	r4,r2
    a750:	01400304 	movi	r5,12
    a754:	0008ff40 	call	8ff4 <__mulsi3>
    a758:	8085883a 	add	r2,r16,r2
    a75c:	10000015 	stw	zero,0(r2)
  }
}
    a760:	e6ffff04 	addi	sp,fp,-4
    a764:	dfc00217 	ldw	ra,8(sp)
    a768:	df000117 	ldw	fp,4(sp)
    a76c:	dc000017 	ldw	r16,0(sp)
    a770:	dec00304 	addi	sp,sp,12
    a774:	f800283a 	ret

0000a778 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a778:	defffa04 	addi	sp,sp,-24
    a77c:	df000515 	stw	fp,20(sp)
    a780:	df000504 	addi	fp,sp,20
    a784:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a788:	0005303a 	rdctl	r2,status
    a78c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a790:	e0fffc17 	ldw	r3,-16(fp)
    a794:	00bfff84 	movi	r2,-2
    a798:	1884703a 	and	r2,r3,r2
    a79c:	1001703a 	wrctl	status,r2
  
  return context;
    a7a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a7a4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a7a8:	e0bfff17 	ldw	r2,-4(fp)
    a7ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a7b0:	e0bffd17 	ldw	r2,-12(fp)
    a7b4:	10800017 	ldw	r2,0(r2)
    a7b8:	e0fffd17 	ldw	r3,-12(fp)
    a7bc:	18c00117 	ldw	r3,4(r3)
    a7c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a7c4:	e0bffd17 	ldw	r2,-12(fp)
    a7c8:	10800117 	ldw	r2,4(r2)
    a7cc:	e0fffd17 	ldw	r3,-12(fp)
    a7d0:	18c00017 	ldw	r3,0(r3)
    a7d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a7d8:	e0bffd17 	ldw	r2,-12(fp)
    a7dc:	e0fffd17 	ldw	r3,-12(fp)
    a7e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a7e4:	e0bffd17 	ldw	r2,-12(fp)
    a7e8:	e0fffd17 	ldw	r3,-12(fp)
    a7ec:	10c00015 	stw	r3,0(r2)
    a7f0:	e0bffb17 	ldw	r2,-20(fp)
    a7f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a7f8:	e0bffe17 	ldw	r2,-8(fp)
    a7fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a800:	e037883a 	mov	sp,fp
    a804:	df000017 	ldw	fp,0(sp)
    a808:	dec00104 	addi	sp,sp,4
    a80c:	f800283a 	ret

0000a810 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a810:	defffb04 	addi	sp,sp,-20
    a814:	dfc00415 	stw	ra,16(sp)
    a818:	df000315 	stw	fp,12(sp)
    a81c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a820:	d0a00917 	ldw	r2,-32732(gp)
    a824:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a828:	d0a0d617 	ldw	r2,-31912(gp)
    a82c:	10800044 	addi	r2,r2,1
    a830:	d0a0d615 	stw	r2,-31912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a834:	00002e06 	br	a8f0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a838:	e0bffd17 	ldw	r2,-12(fp)
    a83c:	10800017 	ldw	r2,0(r2)
    a840:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a844:	e0bffd17 	ldw	r2,-12(fp)
    a848:	10800403 	ldbu	r2,16(r2)
    a84c:	10803fcc 	andi	r2,r2,255
    a850:	10000426 	beq	r2,zero,a864 <alt_tick+0x54>
    a854:	d0a0d617 	ldw	r2,-31912(gp)
    a858:	1000021e 	bne	r2,zero,a864 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a85c:	e0bffd17 	ldw	r2,-12(fp)
    a860:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a864:	e0bffd17 	ldw	r2,-12(fp)
    a868:	10800217 	ldw	r2,8(r2)
    a86c:	d0e0d617 	ldw	r3,-31912(gp)
    a870:	18801d36 	bltu	r3,r2,a8e8 <alt_tick+0xd8>
    a874:	e0bffd17 	ldw	r2,-12(fp)
    a878:	10800403 	ldbu	r2,16(r2)
    a87c:	10803fcc 	andi	r2,r2,255
    a880:	1000191e 	bne	r2,zero,a8e8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a884:	e0bffd17 	ldw	r2,-12(fp)
    a888:	10800317 	ldw	r2,12(r2)
    a88c:	e0fffd17 	ldw	r3,-12(fp)
    a890:	18c00517 	ldw	r3,20(r3)
    a894:	1809883a 	mov	r4,r3
    a898:	103ee83a 	callr	r2
    a89c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a8a0:	e0bfff17 	ldw	r2,-4(fp)
    a8a4:	1000031e 	bne	r2,zero,a8b4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a8a8:	e13ffd17 	ldw	r4,-12(fp)
    a8ac:	000a7780 	call	a778 <alt_alarm_stop>
    a8b0:	00000d06 	br	a8e8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a8b4:	e0bffd17 	ldw	r2,-12(fp)
    a8b8:	10c00217 	ldw	r3,8(r2)
    a8bc:	e0bfff17 	ldw	r2,-4(fp)
    a8c0:	1887883a 	add	r3,r3,r2
    a8c4:	e0bffd17 	ldw	r2,-12(fp)
    a8c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a8cc:	e0bffd17 	ldw	r2,-12(fp)
    a8d0:	10c00217 	ldw	r3,8(r2)
    a8d4:	d0a0d617 	ldw	r2,-31912(gp)
    a8d8:	1880032e 	bgeu	r3,r2,a8e8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a8dc:	e0bffd17 	ldw	r2,-12(fp)
    a8e0:	00c00044 	movi	r3,1
    a8e4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a8e8:	e0bffe17 	ldw	r2,-8(fp)
    a8ec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a8f0:	e0fffd17 	ldw	r3,-12(fp)
    a8f4:	d0a00904 	addi	r2,gp,-32732
    a8f8:	18bfcf1e 	bne	r3,r2,a838 <_gp+0xffff765c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a8fc:	0001883a 	nop
}
    a900:	e037883a 	mov	sp,fp
    a904:	dfc00117 	ldw	ra,4(sp)
    a908:	df000017 	ldw	fp,0(sp)
    a90c:	dec00204 	addi	sp,sp,8
    a910:	f800283a 	ret

0000a914 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a914:	deffff04 	addi	sp,sp,-4
    a918:	df000015 	stw	fp,0(sp)
    a91c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a920:	000170fa 	wrctl	ienable,zero
}
    a924:	e037883a 	mov	sp,fp
    a928:	df000017 	ldw	fp,0(sp)
    a92c:	dec00104 	addi	sp,sp,4
    a930:	f800283a 	ret

0000a934 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a934:	defffb04 	addi	sp,sp,-20
    a938:	dfc00415 	stw	ra,16(sp)
    a93c:	df000315 	stw	fp,12(sp)
    a940:	df000304 	addi	fp,sp,12
    a944:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a948:	00800074 	movhi	r2,1
    a94c:	10ac7904 	addi	r2,r2,-19996
    a950:	10800017 	ldw	r2,0(r2)
    a954:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a958:	00003106 	br	aa20 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    a95c:	e0bffd17 	ldw	r2,-12(fp)
    a960:	10800217 	ldw	r2,8(r2)
    a964:	1009883a 	mov	r4,r2
    a968:	000882c0 	call	882c <strlen>
    a96c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a970:	e0bffd17 	ldw	r2,-12(fp)
    a974:	10c00217 	ldw	r3,8(r2)
    a978:	e0bffe17 	ldw	r2,-8(fp)
    a97c:	10bfffc4 	addi	r2,r2,-1
    a980:	1885883a 	add	r2,r3,r2
    a984:	10800003 	ldbu	r2,0(r2)
    a988:	10803fcc 	andi	r2,r2,255
    a98c:	1080201c 	xori	r2,r2,128
    a990:	10bfe004 	addi	r2,r2,-128
    a994:	10800bd8 	cmpnei	r2,r2,47
    a998:	1000031e 	bne	r2,zero,a9a8 <alt_find_file+0x74>
    {
      len -= 1;
    a99c:	e0bffe17 	ldw	r2,-8(fp)
    a9a0:	10bfffc4 	addi	r2,r2,-1
    a9a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a9a8:	e0bffe17 	ldw	r2,-8(fp)
    a9ac:	e0ffff17 	ldw	r3,-4(fp)
    a9b0:	1885883a 	add	r2,r3,r2
    a9b4:	10800003 	ldbu	r2,0(r2)
    a9b8:	10803fcc 	andi	r2,r2,255
    a9bc:	1080201c 	xori	r2,r2,128
    a9c0:	10bfe004 	addi	r2,r2,-128
    a9c4:	10800be0 	cmpeqi	r2,r2,47
    a9c8:	1000081e 	bne	r2,zero,a9ec <alt_find_file+0xb8>
    a9cc:	e0bffe17 	ldw	r2,-8(fp)
    a9d0:	e0ffff17 	ldw	r3,-4(fp)
    a9d4:	1885883a 	add	r2,r3,r2
    a9d8:	10800003 	ldbu	r2,0(r2)
    a9dc:	10803fcc 	andi	r2,r2,255
    a9e0:	1080201c 	xori	r2,r2,128
    a9e4:	10bfe004 	addi	r2,r2,-128
    a9e8:	10000a1e 	bne	r2,zero,aa14 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    a9ec:	e0bffd17 	ldw	r2,-12(fp)
    a9f0:	10c00217 	ldw	r3,8(r2)
    a9f4:	e0bffe17 	ldw	r2,-8(fp)
    a9f8:	1809883a 	mov	r4,r3
    a9fc:	e17fff17 	ldw	r5,-4(fp)
    aa00:	100d883a 	mov	r6,r2
    aa04:	000abd80 	call	abd8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    aa08:	1000021e 	bne	r2,zero,aa14 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    aa0c:	e0bffd17 	ldw	r2,-12(fp)
    aa10:	00000806 	br	aa34 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    aa14:	e0bffd17 	ldw	r2,-12(fp)
    aa18:	10800017 	ldw	r2,0(r2)
    aa1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    aa20:	e0fffd17 	ldw	r3,-12(fp)
    aa24:	00800074 	movhi	r2,1
    aa28:	10ac7904 	addi	r2,r2,-19996
    aa2c:	18bfcb1e 	bne	r3,r2,a95c <_gp+0xffff7780>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    aa30:	0005883a 	mov	r2,zero
}
    aa34:	e037883a 	mov	sp,fp
    aa38:	dfc00117 	ldw	ra,4(sp)
    aa3c:	df000017 	ldw	fp,0(sp)
    aa40:	dec00204 	addi	sp,sp,8
    aa44:	f800283a 	ret

0000aa48 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    aa48:	defffa04 	addi	sp,sp,-24
    aa4c:	dfc00515 	stw	ra,20(sp)
    aa50:	df000415 	stw	fp,16(sp)
    aa54:	dc000315 	stw	r16,12(sp)
    aa58:	df000404 	addi	fp,sp,16
    aa5c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    aa60:	00bffa04 	movi	r2,-24
    aa64:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    aa68:	e03ffc15 	stw	zero,-16(fp)
    aa6c:	00002106 	br	aaf4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    aa70:	04000074 	movhi	r16,1
    aa74:	842c1704 	addi	r16,r16,-20388
    aa78:	e0bffc17 	ldw	r2,-16(fp)
    aa7c:	1009883a 	mov	r4,r2
    aa80:	01400304 	movi	r5,12
    aa84:	0008ff40 	call	8ff4 <__mulsi3>
    aa88:	8085883a 	add	r2,r16,r2
    aa8c:	10800017 	ldw	r2,0(r2)
    aa90:	1000151e 	bne	r2,zero,aae8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    aa94:	04000074 	movhi	r16,1
    aa98:	842c1704 	addi	r16,r16,-20388
    aa9c:	e0bffc17 	ldw	r2,-16(fp)
    aaa0:	1009883a 	mov	r4,r2
    aaa4:	01400304 	movi	r5,12
    aaa8:	0008ff40 	call	8ff4 <__mulsi3>
    aaac:	8085883a 	add	r2,r16,r2
    aab0:	e0fffe17 	ldw	r3,-8(fp)
    aab4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    aab8:	00800074 	movhi	r2,1
    aabc:	10ac7d04 	addi	r2,r2,-19980
    aac0:	10c00017 	ldw	r3,0(r2)
    aac4:	e0bffc17 	ldw	r2,-16(fp)
    aac8:	1880040e 	bge	r3,r2,aadc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    aacc:	00800074 	movhi	r2,1
    aad0:	10ac7d04 	addi	r2,r2,-19980
    aad4:	e0fffc17 	ldw	r3,-16(fp)
    aad8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    aadc:	e0bffc17 	ldw	r2,-16(fp)
    aae0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    aae4:	00000606 	br	ab00 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    aae8:	e0bffc17 	ldw	r2,-16(fp)
    aaec:	10800044 	addi	r2,r2,1
    aaf0:	e0bffc15 	stw	r2,-16(fp)
    aaf4:	e0bffc17 	ldw	r2,-16(fp)
    aaf8:	10800810 	cmplti	r2,r2,32
    aafc:	103fdc1e 	bne	r2,zero,aa70 <_gp+0xffff7894>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    ab00:	e0bffd17 	ldw	r2,-12(fp)
}
    ab04:	e6ffff04 	addi	sp,fp,-4
    ab08:	dfc00217 	ldw	ra,8(sp)
    ab0c:	df000117 	ldw	fp,4(sp)
    ab10:	dc000017 	ldw	r16,0(sp)
    ab14:	dec00304 	addi	sp,sp,12
    ab18:	f800283a 	ret

0000ab1c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    ab1c:	defffe04 	addi	sp,sp,-8
    ab20:	df000115 	stw	fp,4(sp)
    ab24:	df000104 	addi	fp,sp,4
    ab28:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    ab2c:	e0bfff17 	ldw	r2,-4(fp)
    ab30:	10bffe84 	addi	r2,r2,-6
    ab34:	10c00428 	cmpgeui	r3,r2,16
    ab38:	18001a1e 	bne	r3,zero,aba4 <alt_exception_cause_generated_bad_addr+0x88>
    ab3c:	100690ba 	slli	r3,r2,2
    ab40:	00800074 	movhi	r2,1
    ab44:	10aad504 	addi	r2,r2,-21676
    ab48:	1885883a 	add	r2,r3,r2
    ab4c:	10800017 	ldw	r2,0(r2)
    ab50:	1000683a 	jmp	r2
    ab54:	0000ab94 	movui	zero,686
    ab58:	0000ab94 	movui	zero,686
    ab5c:	0000aba4 	muli	zero,zero,686
    ab60:	0000aba4 	muli	zero,zero,686
    ab64:	0000aba4 	muli	zero,zero,686
    ab68:	0000ab94 	movui	zero,686
    ab6c:	0000ab9c 	xori	zero,zero,686
    ab70:	0000aba4 	muli	zero,zero,686
    ab74:	0000ab94 	movui	zero,686
    ab78:	0000ab94 	movui	zero,686
    ab7c:	0000aba4 	muli	zero,zero,686
    ab80:	0000ab94 	movui	zero,686
    ab84:	0000ab9c 	xori	zero,zero,686
    ab88:	0000aba4 	muli	zero,zero,686
    ab8c:	0000aba4 	muli	zero,zero,686
    ab90:	0000ab94 	movui	zero,686
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    ab94:	00800044 	movi	r2,1
    ab98:	00000306 	br	aba8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    ab9c:	0005883a 	mov	r2,zero
    aba0:	00000106 	br	aba8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    aba4:	0005883a 	mov	r2,zero
  }
}
    aba8:	e037883a 	mov	sp,fp
    abac:	df000017 	ldw	fp,0(sp)
    abb0:	dec00104 	addi	sp,sp,4
    abb4:	f800283a 	ret

0000abb8 <exit>:
    abb8:	defffe04 	addi	sp,sp,-8
    abbc:	000b883a 	mov	r5,zero
    abc0:	dc000015 	stw	r16,0(sp)
    abc4:	dfc00115 	stw	ra,4(sp)
    abc8:	2021883a 	mov	r16,r4
    abcc:	000ac080 	call	ac08 <__call_exitprocs>
    abd0:	8009883a 	mov	r4,r16
    abd4:	000ada40 	call	ada4 <_exit>

0000abd8 <memcmp>:
    abd8:	218d883a 	add	r6,r4,r6
    abdc:	21800826 	beq	r4,r6,ac00 <memcmp+0x28>
    abe0:	20800003 	ldbu	r2,0(r4)
    abe4:	28c00003 	ldbu	r3,0(r5)
    abe8:	10c00226 	beq	r2,r3,abf4 <memcmp+0x1c>
    abec:	10c5c83a 	sub	r2,r2,r3
    abf0:	f800283a 	ret
    abf4:	21000044 	addi	r4,r4,1
    abf8:	29400044 	addi	r5,r5,1
    abfc:	003ff706 	br	abdc <_gp+0xffff7a00>
    ac00:	0005883a 	mov	r2,zero
    ac04:	f800283a 	ret

0000ac08 <__call_exitprocs>:
    ac08:	00800074 	movhi	r2,1
    ac0c:	10ac7704 	addi	r2,r2,-20004
    ac10:	10800017 	ldw	r2,0(r2)
    ac14:	defff304 	addi	sp,sp,-52
    ac18:	ddc00a15 	stw	r23,40(sp)
    ac1c:	d8800015 	stw	r2,0(sp)
    ac20:	05c00034 	movhi	r23,0
    ac24:	10800c04 	addi	r2,r2,48
    ac28:	dc800515 	stw	r18,20(sp)
    ac2c:	dfc00c15 	stw	ra,48(sp)
    ac30:	df000b15 	stw	fp,44(sp)
    ac34:	dd800915 	stw	r22,36(sp)
    ac38:	dd400815 	stw	r21,32(sp)
    ac3c:	dd000715 	stw	r20,28(sp)
    ac40:	dcc00615 	stw	r19,24(sp)
    ac44:	dc400415 	stw	r17,16(sp)
    ac48:	dc000315 	stw	r16,12(sp)
    ac4c:	d9000115 	stw	r4,4(sp)
    ac50:	2825883a 	mov	r18,r5
    ac54:	d8800215 	stw	r2,8(sp)
    ac58:	bdc00004 	addi	r23,r23,0
    ac5c:	d8800017 	ldw	r2,0(sp)
    ac60:	dc400217 	ldw	r17,8(sp)
    ac64:	14c00c17 	ldw	r19,48(r2)
    ac68:	98004226 	beq	r19,zero,ad74 <__call_exitprocs+0x16c>
    ac6c:	9c000117 	ldw	r16,4(r19)
    ac70:	00900034 	movhi	r2,16384
    ac74:	10bfffc4 	addi	r2,r2,-1
    ac78:	9d002217 	ldw	r20,136(r19)
    ac7c:	857fffc4 	addi	r21,r16,-1
    ac80:	80a1883a 	add	r16,r16,r2
    ac84:	8421883a 	add	r16,r16,r16
    ac88:	8421883a 	add	r16,r16,r16
    ac8c:	a42d883a 	add	r22,r20,r16
    ac90:	84000204 	addi	r16,r16,8
    ac94:	9c21883a 	add	r16,r19,r16
    ac98:	a8002616 	blt	r21,zero,ad34 <__call_exitprocs+0x12c>
    ac9c:	90000326 	beq	r18,zero,acac <__call_exitprocs+0xa4>
    aca0:	a0002026 	beq	r20,zero,ad24 <__call_exitprocs+0x11c>
    aca4:	b1002017 	ldw	r4,128(r22)
    aca8:	24801e1e 	bne	r4,r18,ad24 <__call_exitprocs+0x11c>
    acac:	99000117 	ldw	r4,4(r19)
    acb0:	82000017 	ldw	r8,0(r16)
    acb4:	213fffc4 	addi	r4,r4,-1
    acb8:	a900021e 	bne	r21,r4,acc4 <__call_exitprocs+0xbc>
    acbc:	9d400115 	stw	r21,4(r19)
    acc0:	00000106 	br	acc8 <__call_exitprocs+0xc0>
    acc4:	80000015 	stw	zero,0(r16)
    acc8:	40001626 	beq	r8,zero,ad24 <__call_exitprocs+0x11c>
    accc:	9f000117 	ldw	fp,4(r19)
    acd0:	a0000526 	beq	r20,zero,ace8 <__call_exitprocs+0xe0>
    acd4:	00800044 	movi	r2,1
    acd8:	1552983a 	sll	r9,r2,r21
    acdc:	a1404017 	ldw	r5,256(r20)
    ace0:	494a703a 	and	r5,r9,r5
    ace4:	2800021e 	bne	r5,zero,acf0 <__call_exitprocs+0xe8>
    ace8:	403ee83a 	callr	r8
    acec:	00000906 	br	ad14 <__call_exitprocs+0x10c>
    acf0:	a1004117 	ldw	r4,260(r20)
    acf4:	4908703a 	and	r4,r9,r4
    acf8:	2000041e 	bne	r4,zero,ad0c <__call_exitprocs+0x104>
    acfc:	d9000117 	ldw	r4,4(sp)
    ad00:	b1400017 	ldw	r5,0(r22)
    ad04:	403ee83a 	callr	r8
    ad08:	00000206 	br	ad14 <__call_exitprocs+0x10c>
    ad0c:	b1000017 	ldw	r4,0(r22)
    ad10:	403ee83a 	callr	r8
    ad14:	99000117 	ldw	r4,4(r19)
    ad18:	e13fd01e 	bne	fp,r4,ac5c <_gp+0xffff7a80>
    ad1c:	89000017 	ldw	r4,0(r17)
    ad20:	24ffce1e 	bne	r4,r19,ac5c <_gp+0xffff7a80>
    ad24:	ad7fffc4 	addi	r21,r21,-1
    ad28:	b5bfff04 	addi	r22,r22,-4
    ad2c:	843fff04 	addi	r16,r16,-4
    ad30:	003fd906 	br	ac98 <_gp+0xffff7abc>
    ad34:	b8000f26 	beq	r23,zero,ad74 <__call_exitprocs+0x16c>
    ad38:	99400117 	ldw	r5,4(r19)
    ad3c:	99000017 	ldw	r4,0(r19)
    ad40:	2800091e 	bne	r5,zero,ad68 <__call_exitprocs+0x160>
    ad44:	20000826 	beq	r4,zero,ad68 <__call_exitprocs+0x160>
    ad48:	89000015 	stw	r4,0(r17)
    ad4c:	a0000226 	beq	r20,zero,ad58 <__call_exitprocs+0x150>
    ad50:	a009883a 	mov	r4,r20
    ad54:	00000000 	call	0 <__alt_mem_nios_ram-0x8000>
    ad58:	9809883a 	mov	r4,r19
    ad5c:	00000000 	call	0 <__alt_mem_nios_ram-0x8000>
    ad60:	8cc00017 	ldw	r19,0(r17)
    ad64:	003fc006 	br	ac68 <_gp+0xffff7a8c>
    ad68:	9823883a 	mov	r17,r19
    ad6c:	2027883a 	mov	r19,r4
    ad70:	003fbd06 	br	ac68 <_gp+0xffff7a8c>
    ad74:	dfc00c17 	ldw	ra,48(sp)
    ad78:	df000b17 	ldw	fp,44(sp)
    ad7c:	ddc00a17 	ldw	r23,40(sp)
    ad80:	dd800917 	ldw	r22,36(sp)
    ad84:	dd400817 	ldw	r21,32(sp)
    ad88:	dd000717 	ldw	r20,28(sp)
    ad8c:	dcc00617 	ldw	r19,24(sp)
    ad90:	dc800517 	ldw	r18,20(sp)
    ad94:	dc400417 	ldw	r17,16(sp)
    ad98:	dc000317 	ldw	r16,12(sp)
    ad9c:	dec00d04 	addi	sp,sp,52
    ada0:	f800283a 	ret

0000ada4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ada4:	defffd04 	addi	sp,sp,-12
    ada8:	df000215 	stw	fp,8(sp)
    adac:	df000204 	addi	fp,sp,8
    adb0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    adb4:	0001883a 	nop
    adb8:	e0bfff17 	ldw	r2,-4(fp)
    adbc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    adc0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    adc4:	10000226 	beq	r2,zero,add0 <_exit+0x2c>
    ALT_SIM_FAIL();
    adc8:	002af070 	cmpltui	zero,zero,43969
    adcc:	00000106 	br	add4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    add0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    add4:	003fff06 	br	add4 <_gp+0xffff7bf8>
